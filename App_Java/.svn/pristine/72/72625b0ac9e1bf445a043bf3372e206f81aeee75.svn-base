package com.pjzb.service.admin.declare;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;

import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.OperateReportDao;
import com.pjzb.entity.Yybg;
import com.pjzb.service.common.UploadService;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;

/**
 * 运营报告
 * 
 * @author xiaojin
 * 
 */
@Service
public class AdminOperateReportService extends BaseController {

	@Autowired
	private OperateReportDao operateReportDao;

	@Autowired
	private UploadService uploadService;

	public String queryOperateReportListPageInit(Long pageNum, Long pageSize, Model model, String tabid) {
		try {
			pageNum = pageNum == null ? 1 : pageNum;
			pageSize = pageSize == null ? Constants.PAGE_SIZE_20 : pageSize;
			List<Map<String, Object>> list = operateReportDao.queryYybgListForPage((pageNum - 1) * pageSize, pageSize, true);
			long count = operateReportDao.querYybgCount();
			PageBean pageBean = new PageBean();
			pageBean.setPageNum(pageNum);
			pageBean.setPageSize(pageSize);
			pageBean.setTotalNum(count);
			pageBean.setPage(list);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("tabid", tabid);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************分页查询运营报告异常**************************");
		}
		return "/admin/declare/operatereport/list.jsp";
	}

	public String addYybgInit(Model model, String tabid) {
		model.addAttribute("tabid", tabid);
		return "/admin/declare/operatereport/add.jsp";
	}

	public Map<String, Object> uploadYybg(MultipartFile file, String dialogId, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String fileName = ConvertUtil.dateConvert(new Date(), Constants.DATEYM_MILLI) + ".jpg";
			String savePath = ConvertUtil.getUploadPath("/operatereport/front/");
			String uploadResult = uploadService.upload(file, savePath, fileName, dialogId, request);
			if (uploadResult.equals(Constants.SUCCESS)) {
				map.put("imgPath", "../" + savePath + fileName);
				map.put("statusCode", "200");
				map.put("message", "上传成功");
			} else {
				map.put("statusCode", "300");
				map.put("message", "上传失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("******************上传图片异常*****************");
			map.put("statusCode", "300");
			map.put("message", "上传异常");
		}
		return map;
	}

	public Map<String, Object> addYybg(Yybg yybg, String tabid, String userName) throws RuntimeException {
		yybg.setDateTime(new Date());
		yybg.setUserName(userName);
		long result = operateReportDao.addYybg(yybg);
		try {
			if (result > 0) {
				return ajaxDoneInfo("200", "报告增加成功", "dialog", tabid);
			} else {
				return ajaxDoneInfo("300", "报告增加失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("***********报告增加异常*************");
		}
	}

	public Map<String, Object> uploadYybgFile(MultipartFile file, String dialogId, HttpServletRequest request, String tabid, int id, int type, String basePath) {
		Map<String, Object> map = new HashMap<String, Object>();
		String fileName = ConvertUtil.dateConvert(new Date(), Constants.DATEYM_MILLI) + ".pdf";
		String savePath = ConvertUtil.getUploadPath("/operatereport/front/");
		String uploadResult = uploadService.upload(file, savePath, fileName, dialogId, request);
		if (uploadResult.equals(Constants.SUCCESS)) {
			if (type == 2) {
				Yybg yybg = new Yybg();
				yybg.setId(id);
				yybg.setFilePath(basePath + savePath + fileName);
				yybg.setFileName(fileName);
				long result = operateReportDao.updateYybgById(yybg);
				if (result > 0) {
					return ajaxDoneInfo("200", "修改成功", "dialog", tabid);
				} else {
					return ajaxDoneInfo("300", "修改失败", "", "");
				}
			} else {
				Yybg yybg = new Yybg();
				yybg.setId(id);
				yybg.setImgPath("../" + savePath + fileName);
				long result = operateReportDao.updateYybgImgById(yybg);
				if (result > 0) {
					return ajaxDoneInfo("200", "修改成功", "dialog", tabid);
				} else {
					return ajaxDoneInfo("300", "修改失败", "", "");
				}
			}
		} else {
			map.put("statusCode", "300");
			map.put("message", "上传失败");
		}
		return map;
	}

	public Map<String, Object> deleteYybgById(Long id) throws RuntimeException {
		try {
			long result = operateReportDao.deleteYybgById(id);
			if (result > 0) {
				return ajaxDoneInfo("200", "删除成功", "", "");
			} else {
				return ajaxDoneInfo("300", "删除失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("***************报告删除*****************");
		}
	}

}
