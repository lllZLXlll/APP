package com.pjzb.controller.admin;

import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.service.admin.count.AdminBidCountService;
import com.pjzb.service.admin.count.AdminBorrowCountService;
import com.pjzb.service.admin.count.AdminInvestCountService;
import com.pjzb.service.admin.count.AdminLoginCountService;
import com.pjzb.service.admin.count.AdminOperateDataService;
import com.pjzb.service.admin.count.AdminRewardCountService;
import com.pjzb.service.admin.count.AdminWebCountService;

/**
 * 统计管理Controller
 * 
 * 
 */
@Controller
@RequestMapping(value = "/admin")
public class AdminCountController extends BaseController {
	public static Log log = LogFactory.getLog(AdminCountController.class);

	@Autowired
	private AdminLoginCountService adminLoginCountService;

	@Autowired
	private AdminInvestCountService adminInvestCountService;

	@Autowired
	private AdminOperateDataService adminOperateDataService;

	@Autowired
	private AdminBidCountService adminBidCountService;

	@Autowired
	private AdminBorrowCountService adminBorrowCountService;

	@Autowired
	private AdminWebCountService adminWebCountService;

	@Autowired
	private AdminRewardCountService adminRewardCountService;

	/**
	 * 登入统计
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param userName
	 * @param realName
	 * @param count
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/loginStatisInit")
	public String loginStatisList(Model model, Long pageCurrent, Long pageSize, String tabid, String beginTime, String endTime, String userName, String realName, String count) {
		return adminLoginCountService.queryLoginStatisForPage(model, tabid, pageCurrent, pageSize, tabid, beginTime, endTime, userName, realName, count);
	}

	/**
	 * 投资统计
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/financeStatisInit")
	public String financeStatisList(Model model, String tabid, String beginTime, String endTime, String radio) {
		return adminInvestCountService.queryFinanceStatisForPage(model, tabid, beginTime, endTime, radio);
	}

	/**
	 * 投资统计 -- 图表
	 * 
	 * @param model
	 * @param response
	 * @param beginTime
	 * @param endTime
	 * @param radio
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryStatisEcharts")
	@ResponseBody
	public Map<String, Object> queryStatisEcharts(Model model, String tabid, String beginTime, String endTime, String radio) {
		return adminInvestCountService.queryStatisEcharts(model, tabid, beginTime, endTime, radio);
	}
	
	/**
	 * 导出投资统计表
	 * 
	 * @param model
	 * @param response
	 * @param beginTime
	 * @param endTime
	 * @param radio
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportFinanceStatis")
	@ResponseBody
	public void exportFinanceStatis(Model model, HttpServletResponse response, String beginTime, String endTime, String radio) {
		adminInvestCountService.exportFinanceStatis(response, beginTime, endTime, radio);
	}

	/**
	 * 
	 * @describe:查询运营数据
	 * @author: xiaojin
	 * @return
	 */
	@RequestMapping(value = "/operateReportInit")
	public String operateReportInit(Model model, String beginDate, String endDate, Long pageCurrent, Long pageSize, String tabid) {
		return adminOperateDataService.queryOperateReportList(model, beginDate, endDate, pageCurrent, pageSize, tabid);
	}

	/**
	 * 投标统计
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param bTitle
	 * @param realName
	 * @param recommendrealName
	 * @param deadline
	 * @param borrowWay
	 * @param beginTime
	 * @param endTime
	 * @param isAutoBid
	 * @param borrowStatus
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/investStatisInit")
	public String investStatisInit(Model model, Long pageCurrent, Long pageSize, String tabid, String bTitle, String realName, String recommendrealName, String deadline,
			String borrowWay, String beginTime, String endTime, String isAutoBid, String borrowStatus) {
		return adminBidCountService.queryInvestStatisForPage(model, tabid, pageCurrent, pageSize, bTitle, realName, recommendrealName, deadline, borrowWay, beginTime, endTime,
				isAutoBid, borrowStatus);
	}

	/**
	 * 导出投标统计
	 * 
	 * @param model
	 * @param response
	 * @param bTitle
	 * @param realName
	 * @param recommendrealName
	 * @param deadline
	 * @param borrowWay
	 * @param beginTime
	 * @param endTime
	 * @param isAutoBid
	 * @param borrowStatus
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportInvestStatis")
	@ResponseBody
	public void exportInvestStatis(Model model, Long pageCurrent, Long pageSize, HttpServletResponse response, String bTitle, String realName, String recommendrealName,
			String deadline, String borrowWay, String beginTime, String endTime, String isAutoBid, String borrowStatus) {
		adminBidCountService.exportInvestStatis(response, pageCurrent, pageSize, bTitle, realName, recommendrealName, deadline, borrowWay, beginTime, endTime, isAutoBid,
				borrowStatus);
	}

	/**
	 * 投标排名
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param investor
	 * @param group
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/investStatisRankList")
	public String investStatisRankList(Model model, Long pageCurrent, Long pageSize, String tabid, String beginTime, String endTime, String investor, String group) {
		return adminBidCountService.queryInvestStatisRankForPage(model, tabid, pageCurrent, pageSize, beginTime, endTime, investor, group);
	}

	/**
	 * 导出投标排名
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param response
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param investor
	 * @param group
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportInvestStatisRank")
	@ResponseBody
	public void exportInvestStatisRank(Model model, Long pageCurrent, Long pageSize, HttpServletResponse response, String tabid, String beginTime, String endTime, String investor,
			String group) {
		adminBidCountService.exportInvestStatisRank(response, pageCurrent, pageSize, beginTime, endTime, investor, group);
	}

	/**
	 * 借款统计
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param borrowTitle
	 * @param borrower
	 * @param borrowWay
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/borrowStatisInit")
	public String borrowStatisInit(Model model, Long pageCurrent, Long pageSize, String tabid, String beginTime, String endTime, String borrowTitle, String borrower,
			String borrowWay) {
		return adminBorrowCountService.queryBorrowStatisInitForPage(model, tabid, pageCurrent, pageSize, beginTime, endTime, borrowTitle, borrower, borrowWay);
	}

	/**
	 * 导出借款统计
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param response
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param borrowTitle
	 * @param borrower
	 * @param borrowWay
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportBorrowStatis")
	@ResponseBody
	public void exportBorrowStatis(Model model, Long pageCurrent, Long pageSize, HttpServletResponse response, String tabid, String beginTime, String endTime, String borrowTitle,
			String borrower, String borrowWay) {
		adminBorrowCountService.exportBorrowStatis(response, pageCurrent, pageSize, beginTime, endTime, borrowTitle, borrower, borrowWay);
	}

	/**
	 * 投资利息管理费统计
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param investor
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/borrowStatisInterestInit")
	public String borrowStatisInterestInit(Model model, Long pageCurrent, Long pageSize, String tabid, String beginTime, String endTime, String investor) {
		return adminBorrowCountService.queryBorrowStatisInterestInitForPage(model, tabid, pageCurrent, pageSize, beginTime, endTime, investor);
	}

	/**
	 * 导出投资利息管理费
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param response
	 * @param tabid
	 * @param beginTime
	 * @param endTime
	 * @param investor
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportBorrowStatisInterest")
	@ResponseBody
	public void exportBorrowStatisInterest(Model model, Long pageCurrent, Long pageSize, HttpServletResponse response, String tabid, String beginTime, String endTime,
			String investor) {
		adminBorrowCountService.exportBorrowStatisInterest(response, pageCurrent, pageSize, beginTime, endTime, investor);
	}

	/**
	 * 网站统计
	 * 
	 * @param model
	 * @param tabid
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/webStatisInit")
	public String webStatisInit(Model model, String tabid) {
		return adminWebCountService.queryWebStatisInit(model, tabid);
	}

	/**
	 * 导出网站统计
	 * 
	 * @param model
	 * @param response
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportWebStatis")
	@ResponseBody
	public void exportWebStatis(Model model, HttpServletResponse response) {
		adminWebCountService.exportWebStatis(response);
	}

	/**
	 * 奖励统计
	 * 
	 * @param model
	 * @param tabid
	 * @param borrowName
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryAwardInit")
	public String queryAwardInit(Model model, String tabid, Long pageCurrent, Long pageSize, String borrowName, String realName, String awardMoney, String faFangStatus,
			String awardType) {
		return adminRewardCountService.queryAwardInit(model, tabid, pageCurrent, pageSize, borrowName, realName, awardMoney, faFangStatus, awardType);
	}

	/**
	 * 奖励统计2
	 * 
	 * @param model
	 * @param tabid
	 * @param borrowName
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryAwardInits")
	public String queryAwardInits(Model model, String tabid, Long pageCurrent, Long pageSize, String borrowName, String realName, String awardMoney, String faFangStatus,
			String activity, String awardType, String borrowTime) {
		return adminRewardCountService.queryAwardInits(model, tabid, pageCurrent, pageSize, borrowName, realName, awardMoney, faFangStatus, activity, awardType, borrowTime);
	}

	/************************ 新用户投资奖励 *************************/
	/**
	 * 新用户投资奖励发放
	 * 
	 * @param model
	 * @param tabid
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardNewInvest")
	@ResponseBody
	public Map<String, Object> updateAwardNewInvest(Model model, String tabid, Long id) {
		try {
			return adminRewardCountService.updateAwardNewInvest(id, tabid);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "新用户投资奖励发放异常", "", "");
		}
	}

	/**
	 * 新用户投资奖励批量发放
	 * 
	 * @param model
	 * @param delids
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardNewInvestByIds")
	@ResponseBody
	public Map<String, Object> updateAwardNewInvestByIds(Model model, String delids) {
		try {
			return adminRewardCountService.updateAwardNewInvestByIds(delids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "新用户投资奖励发放异常", "", "");
		}
	}

	/**
	 * 导出新用户投资奖励
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param borrowName
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportAwardNewInvest")
	@ResponseBody
	public void exportAwardNewInvest(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String borrowName, String realName, String awardMoney,
			String faFangStatus) {
		adminRewardCountService.exportAwardNewInvest(response, pageCurrent, pageSize, borrowName, realName, awardMoney, faFangStatus);
	}

	/******************************** 抢标奖 ************************************/

	/**
	 * 抢标奖励发放
	 * 
	 * @param model
	 * @param tabid
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardGrabInvest")
	@ResponseBody
	public Map<String, Object> updateAwardGrabInvest(Model model, String tabid, Long id) {
		try {
			return adminRewardCountService.updateAwardGrabInvest(id, tabid);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "抢标奖励发放异常", "", "");
		}
	}

	/**
	 * 批量发放抢标奖
	 * 
	 * @param model
	 * @param delids
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardGrabInvestByIds")
	@ResponseBody
	public Map<String, Object> updateAwardGrabInvestByIds(Model model, String delids) {
		try {
			return adminRewardCountService.updateAwardGrabInvestByIds(delids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "抢标奖批量发放异常", "", "");
		}
	}

	/**
	 * 导出抢标奖励
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param borrowName
	 * @param realName
	 * @param awardType
	 * @param faFangStatus
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportAwardzGrabInvest")
	@ResponseBody
	public void exportAwardzGrabInvest(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String borrowName, String realName, String awardType,
			String faFangStatus) {
		adminRewardCountService.exportAwardzGrabInvest(response, pageCurrent, pageSize, borrowName, realName, awardType, faFangStatus);
	}

	/******************************* 老用户再投奖励 ***********************************/

	/**
	 * 老用户再投奖励发放
	 * 
	 * @param model
	 * @param tabid
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardOldInvest")
	@ResponseBody
	public Map<String, Object> updateAwardOldInvest(Model model, String tabid, Long id) {
		try {
			return adminRewardCountService.updateAwardOldInvest(id, tabid);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "老用户再投奖励发放异常", "", "");
		}
	}

	/**
	 * 批量发放老用户再投奖
	 * 
	 * @param model
	 * @param delids
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardOldInvestByIds")
	@ResponseBody
	public Map<String, Object> updateAwardOldInvestByIds(Model model, String delids) {
		try {
			return adminRewardCountService.updateAwardOldInvestByIds(delids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "老用户再投奖励批量发放异常", "", "");
		}
	}

	/**
	 * 导出老用户再投奖
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param borrowName
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @param borrowTime
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportAwardzOldInvest")
	@ResponseBody
	public void exportAwardzOldInvest(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String borrowName, String realName, String awardMoney,
			String faFangStatus, String borrowTime) {
		adminRewardCountService.exportAwardzOldInvest(response, pageCurrent, pageSize, borrowName, realName, awardMoney, faFangStatus, borrowTime);
	}

	/******************************* 邀请奖励 ***********************************/

	/**
	 * 邀请奖励发放
	 * 
	 * @param model
	 * @param tabid
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardInviteInvest")
	@ResponseBody
	public Map<String, Object> updateAwardInviteInvest(Model model, String tabid, Long id) {
		try {
			return adminRewardCountService.updateAwardInviteInvest(id, tabid);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "邀请奖励发放异常", "", "");
		}
	}

	/**
	 * 批量发放邀请奖励
	 * 
	 * @param model
	 * @param delids
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardInviteInvestByIds")
	@ResponseBody
	public Map<String, Object> updateAwardInviteInvestByIds(Model model, String delids) {
		try {
			return adminRewardCountService.updateAwardInviteInvestByIds(delids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "邀请奖励批量发放异常", "", "");
		}
	}

	/**
	 * 导出邀请奖励
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportAwardInviteInvest")
	@ResponseBody
	public void exportAwardInviteInvest(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String realName, String awardMoney, String faFangStatus) {
		adminRewardCountService.exportAwardInviteInvest(response, pageCurrent, pageSize, realName, awardMoney, faFangStatus);
	}

	/******************************* 累积投资奖励 ***********************************/

	/**
	 * 发放累计投资奖励
	 * 
	 * @param model
	 * @param tabid
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardCumulateInvest")
	@ResponseBody
	public Map<String, Object> updateAwardCumulateInvest(Model model, String tabid, Long id) {
		try {
			return adminRewardCountService.updateAwardCumulateInvest(id, tabid);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "累积投资奖励发放异常", "", "");
		}
	}

	/**
	 * 批量发放累计投资奖励
	 * 
	 * @param model
	 * @param delids
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/updateAwardCumulateInvestByIds")
	@ResponseBody
	public Map<String, Object> updateAwardCumulateInvestByIds(Model model, String delids) {
		try {
			return adminRewardCountService.updateAwardCumulateInvestByIds(delids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "累计投资奖励批量发放异常", "", "");
		}
	}

	/**
	 * 导出累计投资奖励
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param realName
	 * @param awardMoney
	 * @param faFangStatus
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportAwardCumulateInvest")
	@ResponseBody
	public void exportAwardCumulateInvest(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String realName, String awardType, String faFangStatus) {
		adminRewardCountService.exportAwardCumulateInvest(response, pageCurrent, pageSize, realName, awardType, faFangStatus);
	}

	@RequestMapping(value = "/queryRecommendInvestList")
	public String queryRecommendInvestList(Model model, String borrowTitle, String realName, String recommendUsername, Integer status, Integer money, Long pageCurrent,
			Long pageSize, String tabid) {
		return adminRewardCountService.queryRecommendInvestList(model, borrowTitle, realName, recommendUsername, status, money, pageCurrent, pageSize, tabid);
	}

	/******************************* 投资赢豪礼 ***********************************/

	/**
	 * 投资赢豪礼奖励 查询
	 */
	@RequestMapping(value = "/queryInvestWinGift")
	public String queryInvestWinGift(Model model, String tabid, Long pageCurrent, Long pageSize, String realName, Integer awardType, Integer state) {
		return adminRewardCountService.queryInvestWinGift(model, tabid, pageCurrent, pageSize, realName, awardType, state);
	}

	/**
	 * 投资赢豪礼奖励 发放
	 */
	@RequestMapping(value = "/updateInvestWinGift")
	@ResponseBody
	public Map<String, Object> updateInvestWinGift(Model model, String tabid, String ids) {
		try {
			return adminRewardCountService.updateInvestWinGift(model, tabid, ids);
		} catch (Exception e) {
			log.info(e);
			return ajaxDoneInfo("300", "投资赢豪礼奖励发放异常", "", "");
		}
	}

	/**
	 * 投资赢豪礼奖励 导出
	 */
	@RequestMapping(value = "/exportInvestWinGift")
	@ResponseBody
	public void exportInvestWinGift(Model model, HttpServletResponse response, String realName, String awardType, String state) {
		try {
			adminRewardCountService.exportAwardInviteInvest2(response, realName, awardType, state);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************投资赢豪礼奖励导出异常**************************");
		}
	}

	/**
	 * 
	 * @describe:发放邀请奖励嗨翻天活动的奖励
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/addRecommendInvestReward")
	@ResponseBody
	public Map<String, Object> addRecommendInvestReward(Long[] ids) {
		try {
			return adminRewardCountService.addRecommendInvestReward(ids, getSessionAdminInfo(), getBasePath());
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			return ajaxDoneInfo("300", "邀请奖励嗨翻天活动奖励发放异常", "", "");
		}
	}

	/**
	 * 
	 * @describe:单独发放邀请奖励嗨翻天活动的奖励
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/addRecommendInvestRewardForDown")
	@ResponseBody
	public Map<String, Object> addRecommendInvestRewardForDown(Long id) {
		try {
			return adminRewardCountService.addRecommendInvestRewardForDown(id);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			return ajaxDoneInfo("300", "邀请奖励嗨翻天活动线下奖励发放异常", "", "");
		}
	}

}
