package com.pjzb.service.admin.declare;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;

import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.ActivityDao;
import com.pjzb.entity.Activity;
import com.pjzb.service.common.UploadService;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.shove.Convert;

/**
 * 活动管理
 * 
 * @author xiaojin
 * 
 */
@Service
public class AdminActivityService extends BaseController {

	@Autowired
	private ActivityDao activityDao;

	@Autowired
	private UploadService uploadService;

	public String queryActivityListPageInit(Long pageNum, Long pageSize, Model model, String tabid) {
		try {
			pageNum = pageNum == null ? 1 : pageNum;
			pageSize = pageSize == null ? Constants.PAGE_SIZE_20 : pageSize;
			List<Map<String, Object>> list = activityDao.queryActivityListForPage((pageNum - 1) * pageSize, pageSize, true);
			long count = activityDao.queryActivityCount();
			PageBean pageBean = new PageBean();
			pageBean.setPageNum(pageNum);
			pageBean.setPageSize(pageSize);
			pageBean.setTotalNum(count);
			pageBean.setPage(list);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("tabid", tabid);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************分页查询网站咨询异常**************************");
		}
		return "/admin/declare/activity/list.jsp";
	}

	public String addActivityInit(Model model, String tabid) {
		model.addAttribute("tabid", tabid);
		return "/admin/declare/activity/add.jsp";
	}

	public Map<String, Object> addActivity(Activity activity, String tabid) throws RuntimeException {
		activity.setPublishTime(new Date());
		long result = activityDao.addActivity(activity);
		try {
			if (result > 0) {
				return ajaxDoneInfo("200", "活动增加成功", "dialog", tabid);
			} else {
				return ajaxDoneInfo("300", "活动增加失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("*****************活动增加异常**************");
		}
	}

	public Map<String, Object> uploadActivity(MultipartFile file, String dialogId, HttpServletRequest request, String basePath) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String fileName = ConvertUtil.dateConvert(new Date(), Constants.DATEYM_MILLI) + ".jpg";
			String savePath = ConvertUtil.getUploadPath("/activity/app/");
			String uploadResult = uploadService.upload(file, savePath, fileName, dialogId, request);
			if (uploadResult.equals(Constants.SUCCESS)) {
				map.put("imgPath", basePath + savePath + fileName);
				map.put("ActivityName", fileName);
				map.put("statusCode", "200");
				map.put("message", "上传成功");
			} else {
				map.put("statusCode", "300");
				map.put("message", "上传失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("******************上传图片异常*****************");
			map.put("statusCode", "300");
			map.put("message", "上传异常");
		}
		return map;
	}

	public Map<String, Object> deleteActivityById(Long id) throws RuntimeException {
		try {
			long result = activityDao.deleteActivityById(id);
			if (result > 0) {
				return ajaxDoneInfo("200", "删除成功", "", "");
			} else {
				return ajaxDoneInfo("300", "删除失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("****************删除活动异常*************");
		}
	}

	public Map<String, Object> deleteActivityByIds(String delids) throws RuntimeException {
		List<Long> list = new ArrayList<Long>();
		try {
			log.info("************批量删除活动delids***********" + delids);
			String[] ids = delids.split(",");
			for (int i = 0; i < ids.length; i++) {
				list.add(Convert.strToLong(ids[i] + "", 1L));
			}
			long result = activityDao.deleteActivityByIds(list);
			if (result > 0) {
				return ajaxDoneInfo("200", "活动删除成功", "", "");
			} else {
				return ajaxDoneInfo("300", "活动删除失败", "", "");
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("*****************批量删除活动异常**************");
		}
	}

	public String updateActivityByIdInit(Long id, Model model, String tabid) {
		try {
			model.addAttribute("activity", activityDao.queryActivityById(id));
			model.addAttribute("tabid", tabid);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************根据id查询活动异常**************************");
		}
		return "/admin/declare/activity/edit.jsp";
	}

	public Map<String, Object> updateActivityById(Activity activity, String tabid) throws RuntimeException {
		try {
			long result = activityDao.updateActivityById(activity);
			if (result > 0) {
				return ajaxDoneInfo("200", "活动修改成功", "dialog", tabid);
			} else {
				return ajaxDoneInfo("300", "活动修改失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("******************活动修改异常****************");
		}
	}

}
