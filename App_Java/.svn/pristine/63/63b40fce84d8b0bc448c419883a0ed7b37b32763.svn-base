package com.pjzb.controller.front;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.entity.User;
import com.pjzb.service.chinapnr.ChinapnrInterface;
import com.pjzb.service.chinapnr.ChinapnrService;
import com.pjzb.service.common.UserService;
import com.pjzb.service.front.MyAccountService;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.pjzb.util.DateUtil;
import com.pjzb.util.GenerateSequenceNo;
import com.pjzb.util.IConstants;
import com.shove.Convert;

import net.sf.json.JSONObject;

/**
 * 登录汇付、汇付个人用户注册初始化..、检查企业信息是否填写完整、汇付企业账户查询、
 * 
 * @author xiaojin
 * 
 */
@Controller
@RequestMapping(value = "/front")
public class FrontMyAccountController extends BaseController {
	public static Log log = LogFactory.getLog(FrontMyAccountController.class);

	@Autowired
	private UserService userService;

	@Autowired
	private MyAccountService myAccountService;

	@Autowired
	private ChinapnrService chinapnrService;

	/**
	 * 账户总览
	 * 
	 * @return
	 */
	@RequestMapping(value = "/queryHome")
	@ResponseBody
	public Map<String, Object> queryHome() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			User user = userService.queryUserById(getSessionUserId());
			String ipayAccount = user.getIpayAccount();
			if (!StringUtils.isBlank(ipayAccount)) {
				chinapnrService.checkCardInfo(getSessionUserId(), ipayAccount, user.getUsername(), chosese());
			} else {
				user.setIpayAccount("");
			}
			jsonMap.putAll(myAccountService.checkHome(user, chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "账户总览查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}
	
	/**
	 * 查询用户账户现金券，代金券数量
	 * 
	 * @return
	 */
	@RequestMapping(value = "/queryCouponCount")
	@ResponseBody
	public Map<String, Object> queryCouponCount() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			User user = userService.queryUserById(getSessionUserId());
			jsonMap.putAll(myAccountService.checkHome(user, chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	@RequestMapping(value = "/findIpayAccountByUserId")
	@ResponseBody
	public Map<String, Object> findIpayAccountByUserId() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			Map<String, String> userMap = userService.findIpayAccountByUserId(getSessionUserId());
			jsonMap.put("user", userMap);
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询异常");
		}
		return jsonMap;
	}

	/**
	 * 查询代金券和现金券记录
	 * 
	 * @return @throws
	 */
	@RequestMapping(value = "/vocherAmts")
	@ResponseBody
	public Map<String, Object> vocherAmts() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			Long userId = getSessionUserId();
			jsonMap.putAll(myAccountService.queryRedmoneyrecord(userId, chosese()));
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "3");
			jsonMap.put("msg", "查询异常");
		}
		return jsonMap;

	}

	/**
	 * 用户资金记录
	 * 
	 * @return
	 */
	@RequestMapping(value = "/findFundrecordList")
	@ResponseBody
	public Map<String, Object> findFundrecordList() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			String startTime = ConvertUtil.objToStrConvert(jsonObject.get("startTime"));
			String endTime = ConvertUtil.objToStrConvert(jsonObject.get("endTime"));
			String momeyType = ConvertUtil.objToStrConvert(jsonObject.get("momeyType"));
			String fundMode = ConvertUtil.objToStrConvert(jsonObject.get("fundMode"));
			Long curPage = Convert.strToLong(jsonObject.get(Constants.CURPAGE) + "", Constants.LONG_1);
			String pageType = chosese();
			PageBean pageBean = myAccountService.findFundrecordList(startTime, endTime, momeyType, getSessionUserId(), curPage,
					pageType.equals(Constants.PHONEPAGE) ? Constants.PAGE_SIZE_20 : Constants.PAGE_SIZE_10, pageType, fundMode);
			jsonMap.put("pageBean", pageBean);
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "资金记录查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 登录汇付
	 * 
	 * @return
	 */
	@RequestMapping(value = "/loginHuiFu")
	@ResponseBody
	public Map<String, Object> loginHuiFu() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			User user = userService.queryUserById(getSessionUserId());
			String html = ChinapnrInterface.userLogin(user.getIpayAccount(), chosese());
			jsonMap.put("huiFuhtml", html);
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "登录异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 汇付个人用户注册初始化
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/regIpayPersonal")
	@ResponseBody
	public Map<String, Object> regIpayPersonal() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			jsonMap.putAll(myAccountService.queryUserRegChinapnrInit(getSessionUserId(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付个人用户注册初始化异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 个人用户注册汇付
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/createIpsAcctApp")
	@ResponseBody
	public Map<String, Object> createIpsAcctApp() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myAccountService.checkCreateIpsAcctApp(jsonObject, getBasePath(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付个人开户异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 汇付企业用户注册前置条件检查
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/regIpayEnterpriseAppInit")
	@ResponseBody
	public Map<String, Object> regIpayEnterpriseAppInit() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			jsonMap.putAll(myAccountService.queryIpayEnterpriseInit(getSessionUserId(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付企业用户注册初始化检查异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 汇付企业用户注册初始化
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/regIpayEnterprisesApp")
	@ResponseBody
	public Map<String, Object> regIpayEnterprisesApp() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			jsonMap.putAll(myAccountService.queryRegIpayEnterprises(getSessionUserId(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付企业用户注册初始化异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 前台--汇付开户--企业开户
	 */
	@RequestMapping(value = "/corpRegisterApp")
	@ResponseBody
	public Map<String, Object> corpRegisterApp() {
		session().removeAttribute("phoneCodeFilleError");

		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}

			jsonMap.putAll(myAccountService.checkCorpRegister(jsonObject, getBasePath(), session(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付企业用户开户异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 前台--汇付企业账户查询
	 */
	@RequestMapping(value = "/CorpRegisterQueryApp")
	@ResponseBody
	public Map<String, Object> CorpRegisterQueryApp() {

		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}

			jsonMap.putAll(myAccountService.checkCorpRegisterQuery(getSessionUserInfo(), jsonObject, session(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "汇付企业账户查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 使用现/代金券
	 */
	@RequestMapping(value = "/useXianJinQuan")
	@ResponseBody
	public Map<String, Object> useXianJinQuan() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAppParams();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myAccountService.updateVouchers(jsonObject, getSessionUserId(), chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "使用现/代金券异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * @Descb: 投资借款列表
	 */
	@RequestMapping(value = "/homeBorrowInvestList")
	@ResponseBody
	public Map<String, Object> homeBorrowInvestList() {
		JSONObject jsonObject = getAjaxParam();
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		PageBean pageBean = new PageBean();
		try {
			String uid = jsonObject.get("uid") + "";
			long userId = Convert.strToLong(uid, -1l);
			pageBean.setPageNum(Long.parseLong(jsonObject.get("curPage") + ""));
			Integer[] array = { 2, 3, 4, 5, 6 };
			String title = ConvertUtil.objToStrConvert(jsonObject.get("title"));
			String borrowTypeSubId = ConvertUtil.objToStrConvert(jsonObject.get("borrowTypeSubId"));
			String publishTimeStart = ConvertUtil.objToStrConvert(jsonObject.get("publishTimeStart"));
			String publishTimeEnd = ConvertUtil.objToStrConvert(jsonObject.get("publishTimeEnd"));
			jsonMap.putAll(myAccountService.queryBorrowInvestByCondition(Integer.parseInt(borrowTypeSubId), title, publishTimeStart, publishTimeEnd, array, userId, pageBean,
					(pageBean.getPageNum() - 1) * 10, Constants.PAGE_SIZE_10));
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
			return jsonMap;
		} catch (Exception e) {
			jsonMap.put("error", "-1");
			jsonMap.put("msg", "查询借款列表异常");
			log.error(e);
			e.printStackTrace();
			return jsonMap;
		}
	}

	/**
	 * @Descb: 生利宝交易接口 zlx
	 */
	@RequestMapping(value = "/slbaoTrading")
	@ResponseBody
	public Map<String, Object> slbaoTrading() throws Exception {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			User user = getSessionUserInfo();
			User userMap = userService.queryUserById(user.getId());
			String html = ChinapnrInterface.slbaoTrading(userMap.getIpayAccount(), GenerateSequenceNo.generateSequenceNo(), DateUtil.dateToYMD(new Date()),
					getBasePath() + "WEB-PC/synchronousSLBaoTrading.do", getBasePath() + "asynchronousSLBaoTrading.do", user.getId() + "", chosese());
			jsonMap.put("error", "0");
			jsonMap.put("msg", "成功");
			jsonMap.put("html", html);
			return jsonMap;
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "-1");
			jsonMap.put("msg", "打开生利宝管理失败");
			return jsonMap;
		}
	}

	/**
	 * 生利宝资金明细（所有、转入、转出、利息收益）
	 * 
	 */
	@RequestMapping(value = "/slbaoDetail")
	@ResponseBody
	public Map<String, Object> slbaoDetail() {

		try {
			User user = getSessionUserInfo();
			Long userId = user.getId();
			JSONObject json = getAjaxParam();
			return myAccountService.findBorrowInvestByCondition(json, Long.parseLong(json.get("curPage") + ""), Long.valueOf(IConstants.PAGE_SIZE_20), userId, chosese());
		} catch (Exception e) {
			e.printStackTrace();
			Map<String, Object> jsonMap = new HashMap<String, Object>();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询异常");
			return jsonMap;
		}
	}

}
