package com.pjzb.service.admin.borrow;

import java.math.BigDecimal;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.pjzb.config.chinapnr.ChinapnrConfig;
import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.BorrowDao;
import com.pjzb.dao.CollectionDao;
import com.pjzb.dao.OperationLogDao;
import com.pjzb.dao.RepaymentDao;
import com.pjzb.entity.Admin;
import com.pjzb.entity.OperationLog;
import com.pjzb.service.chinapnr.ChinapnrInterface;
import com.pjzb.service.common.UserService;
import com.pjzb.util.ConvertUtil;
import com.pjzb.util.DateUtil;
import com.pjzb.util.ExcelUtils;
import com.pjzb.util.GenerateSequenceNo;
import com.pjzb.util.IAmountConstants;
import com.pjzb.util.IConstants;
import com.shove.Convert;
import com.shove.web.Utility;

/**
 * 逾期借款
 * 
 * @author zlx
 * 
 */

@Service
public class AdminOverdueBorrowService extends BaseController {

	@Autowired
	private BorrowDao borrowDao;

	@Autowired
	private RepaymentDao repaymentDao;

	@Autowired
	private CollectionDao collectionDao;

	@Autowired
	private OperationLogDao operationLogDao;

	@Autowired
	private UserService userService;

	public String lateRepayInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, Long borrowWay, Long borrowState) {
		userName = ConvertUtil.objToStrConvert(Utility.filteSqlInfusion(userName));
		long count = borrowDao.queryLateRepayByConditionCount(userName, borrowWay, borrowState);

		List<Map<String, Object>> page = borrowDao.queryLateRepayByCondition(userName, borrowWay, borrowState, (pageCurrent - 1) * pageSize, pageSize);
		// 逾期的借款统计总额
		Map<String, String> lateRepayMap = borrowDao.queryLateRepayAmount(userName, borrowWay, borrowState);

		// 得到当前页逾期借款金额
		double lateAmount = 0;
		double lateFI = 0;
		double totalSum = 0;
		if (page != null) {
			for (Map<String, Object> map : page) {
				lateAmount = lateAmount + Convert.strToDouble(map.get("repaySum") + "", 0);
				lateFI = lateFI + Convert.strToDouble(map.get("lateFI") + "", 0);
				totalSum = totalSum + Convert.strToDouble(map.get("totalSum") + "", 0);
			}
		}

		model.addAttribute("tabid", tabid);
		model.addAttribute("userName", userName);
		model.addAttribute("borrowWay", borrowWay);
		model.addAttribute("borrowState", borrowState);
		model.addAttribute("map", lateRepayMap);
		model.addAttribute("lateAmount", lateAmount);
		model.addAttribute("lateFI", lateFI);
		model.addAttribute("totalSum", totalSum);
		model.addAttribute("pageBean", new PageBean(pageCurrent, pageSize, count, page));

		return "/admin/borrow/overdueborrow/list.jsp";
	}

	public void exportlateRepay(String userName, Long borrowWay, Long borrowState, HttpServletResponse response) {
		try {
			userName = ConvertUtil.objToStrConvert(Utility.filteSqlInfusion(userName));
			List<Map<String, Object>> applyList = borrowDao.exportLateRepayByCondition(userName.substring(0, userName.indexOf(",")), borrowWay, borrowState);
			HSSFWorkbook wb = ExcelUtils.exportExcelCommon("逾期借款列表", applyList, new String[] { "用户名", "真实姓名", "借款标题", "期数", "类型", "应还时间", "逾期天数（天）", "应还金额（¥）", "逾期金额（¥）",
					"总还款（¥）", "网站待还", "还款状态" }, new String[] { "username", "realName", "borrowTitle", "repayPeriod", "borrowWay1", "repayDate1", "lateDay", "totalSum", "lateFI",
					"repaySum", "isWebRepay1", "repayStatus1" });
			this.export(wb, new Date().getTime() + ".xls", response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************逾期借款导出异常***************************");
		}
	}

	public String queryRepaymentDetail(Model model, String tabid, Long id) {
		Map<String, Object> map = repaymentDao.queryRepaymentDetail(id);
		List<Map<String, Object>> serviceList = repaymentDao.queryRepaymentService(id);
		List<Map<String, Object>> collectionList = collectionDao.queryRepaymentCollection(id);

		model.addAttribute("tabid", tabid);
		model.addAttribute("map", map);
		model.addAttribute("serviceList", serviceList);
		model.addAttribute("collectionList", collectionList);
		model.addAttribute("id", id);
		return "/admin/borrow/overdueborrow/show.jsp";
	}

	public Map<String, Object> addCollection(Model model, String tabid, Long id, String colResult, String remark) throws RuntimeException {
		colResult = ConvertUtil.objToStrConvert(Utility.filteSqlInfusion(colResult));
		long result = collectionDao.addCollection(id, colResult, remark);
		Admin admin = getSessionAdminInfo();
		model.addAttribute("tabid", tabid);
		if (result <= 0) {
			operationLogDao.addOperationLog(new OperationLog("t_collection", admin.getUserName(), IConstants.INSERT, admin.getLastIp(), new Date(), 0d, "添加催收记录失败", 2, admin
					.getId()));
			return ajaxDoneInfo("300", "添加催收记录失败", "", tabid);
		} else {
			operationLogDao.addOperationLog(new OperationLog("t_collection", admin.getUserName(), IConstants.INSERT, admin.getLastIp(), new Date(), 0d, "添加催收记录成功", 2, admin
					.getId()));
			return ajaxDoneInfo("200", "添加催收记录成功", "", tabid);
		}
	}

	public Map<String, Object> delCollection(Model model, String tabid, Long id) {
		long result = collectionDao.delCollection(id);
		Admin admin = getSessionAdminInfo();
		if (result <= 0) {
			operationLogDao.addOperationLog(new OperationLog("t_collection", admin.getUserName(), IConstants.DELETE, admin.getLastIp(), new Date(), 0d, "删除催收记录失败", 2, admin
					.getId()));
			return ajaxDoneInfo("300", "删除催收记录失败", "", tabid);
		} else {
			operationLogDao.addOperationLog(new OperationLog("t_collection", admin.getUserName(), IConstants.DELETE, admin.getLastIp(), new Date(), 0d, "删除催收记录成功", 2, admin
					.getId()));
			return ajaxDoneInfo("200", "删除催收记录成功", "", tabid);
		}
	}

	public String queryOverduePaymentInit(Model model, String tabid, long pageCurrent, long pageSize, String userName, Long borrowWay, Long borrowState) {
		userName = ConvertUtil.objToStrConvert(Utility.filteSqlInfusion(userName));
		long count = borrowDao.queryOverduePaymentByConditionCount(userName, borrowWay, borrowState);

		List<Map<String, Object>> page = borrowDao.queryOverduePaymentByCondition(userName, borrowWay, borrowState, (pageCurrent - 1) * pageSize, pageSize);
		// 逾期的借款统计总额
		Map<String, String> lateRepayMap = borrowDao.queryOverduePaymentAmount(userName, borrowWay, borrowState);

		// 得到当前页逾期借款金额
		double lateAmount = 0;
		double lateFI = 0;
		double totalSum = 0;
		if (page != null) {
			for (Map<String, Object> map : page) {
				lateAmount = lateAmount + Convert.strToDouble(map.get("repaySum") + "", 0);
				lateFI = lateFI + Convert.strToDouble(map.get("lateFI") + "", 0);
				totalSum = totalSum + Convert.strToDouble(map.get("totalSum") + "", 0);
			}
		}

		model.addAttribute("tabid", tabid);
		model.addAttribute("userName", userName);
		model.addAttribute("borrowWay", borrowWay);
		model.addAttribute("borrowState", borrowState);
		model.addAttribute("map", lateRepayMap);
		model.addAttribute("lateAmount", lateAmount);
		model.addAttribute("lateFI", lateFI);
		model.addAttribute("totalSum", totalSum);
		model.addAttribute("pageBean", new PageBean(pageCurrent, pageSize, count, page));

		return "/admin/borrow/overdueborrow/list-overdue.jsp";
	}

	public void exportLateOverduePayment(String userName, Long borrowWay, Long borrowState, HttpServletResponse response) {
		try {
			userName = ConvertUtil.objToStrConvert(Utility.filteSqlInfusion(userName));
			List<Map<String, Object>> applyList = borrowDao.exportLateOverduePayment(userName.substring(0, userName.indexOf(",")), borrowWay, borrowState);
			HSSFWorkbook wb = ExcelUtils.exportExcelCommon("逾期垫付列表", applyList, new String[] { "用户名", "真实姓名", "借款标题", "期数", "类型", "应还时间", "逾期天数（天）", "应还金额（¥）", "逾期金额（¥）",
					"总还款（¥）", "网站待还", "还款状态" }, new String[] { "username", "realName", "borrowTitle", "repayPeriod", "borrowWayName", "repayDate1", "lateDay", "totalSum",
					"lateFI", "repaySum", "isWebRepay1", "repayStatus1" });
			this.export(wb, new Date().getTime() + ".xls", response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************企业融资申请导出异常***************************");
		}
	}

	public Map<String, Object> overduePaymentRepaySubmit(Model model, String tabid, Long id, String basePath) {
		long tabidInt = tabid.indexOf(",");
		if (tabidInt != -1)
			tabid = tabid.substring(0, tabid.indexOf(",") != -1 ? tabid.indexOf(",") : 0);
		if (id == null) {
			return ajaxDoneInfo("300", IConstants.ACTOIN_ILLEGAL, "", "");
		}
		Admin admin = getSessionAdminInfo();
		Map<String, String> map = updateOverduePaymentRepay(id, admin.getId(), basePath);
		if (map == null) {
			return ajaxDoneInfo("300", "操作失败", "", "");
		} else if (map.get("avlBal") != null) {
			return ajaxDoneInfo("300", "余额不足，请充值！", "", "");
		}
		String message = Convert.strToStr(map.get("ret_desc"), null) == null ? "操作成功" : map.get("ret_desc");
		if (StringUtils.isBlank(map.get("ret_desc"))) {
			// 添加操作日志
			operationLogDao.addOperationLog(new OperationLog("t_repayment", admin.getUserName(), IConstants.UPDATE, admin.getLastIp(), new Date(), 0d, "管理员进行逾期垫付操作", 2, admin
					.getId()));
		}
		return ajaxDoneInfo("200", message, "", tabid);
	}

	@SuppressWarnings("unchecked")
	private Map<String, String> updateOverduePaymentRepay(Long idLong, Long adminId, String basePath) throws RuntimeException {
		basePath = Utility.filteSqlInfusion(basePath);
		Map<String, String> map = new HashMap<String, String>();
		Map<String, Object> borrowUserMap = new HashMap<String, Object>();
		List<Map<String, Object>> investorList = new ArrayList<Map<String, Object>>();

		String result = null;
		long ret = -1;
		try {
			// 查询借款信息得到借款时插入的平台收费标准
			Map<String, Object> mapacc = borrowDao.queryBorrowCostByPayId(idLong);
			String feelog = Convert.strToStr(mapacc.get("feelog") + "", "");
			Map<String, Double> feeMap = (Map<String, Double>) JSONObject.toBean(JSONObject.fromObject(feelog), HashMap.class);
			double investFeeRate = Convert.strToDouble(feeMap.get(IAmountConstants.INVEST_FEE_RATE) + "", 0);

			/*************** 上汇付处理逾期借款垫付还款 *************************/
			JSONObject json1 = JSONObject.fromObject(ChinapnrInterface.queryBalanceBg(ChinapnrConfig.CHINAPNR_MERCUSTID));
			String AvlBalString = json1.getString("AvlBal");// 用户在汇付可用余额
			AvlBalString = AvlBalString.replaceAll(",", "");
			double avlBal = Convert.strToDouble(AvlBalString + "", 0);

			// 根据借款Id查询出所有逾期投资人信息
			List<Map<String, Object>> list = borrowDao.queryAllOverduePaymentRepayInfo(idLong);

			JSONObject json = new JSONObject();

			if (list == null || list.equals("[]")) {
				return null;
			}
			String outCustId = ChinapnrConfig.CHINAPNR_MERCUSTID;// 担保公司(代偿,只需具备担保资格的担保公司客户号,即企业开户账户)
			String outAcctId = "MDT000001";
			String bgRetUrl = basePath + "/pubCallBack.do";
			for (Map<String, Object> maps : list) {

				String amount = maps.get("amount") + "";
				StringBuffer sb = new StringBuffer();
				if (null != amount && amount.indexOf(".") == -1) {
					amount = sb.append(amount).append(".00").toString();
				} else {
					amount = amount.substring(0, amount.indexOf(".") + 3);
				}

				double amountDou = Convert.strToDouble(amount, 0);
				if (avlBal < amountDou) {
					map.put("avlBal", "-1");
					return map;
				}

				String inAcctId = "";
				String inCustId = maps.get("usrCustId") + ""; // 入账客户号

				String ordId = GenerateSequenceNo.generateSequenceNo();

				String subOrdId = maps.get("subOrdId") + "";
				String subOrdDate = maps.get("subOrdDate") + "";
				if (subOrdDate.length() > 8) {
					subOrdDate = DateUtil.YYYYMMDD.format(DateUtil.YYYY_MM_DD.parse(subOrdDate));
				}
				String fee = "0.00"; // 代偿无手续费
				json = JSONObject.fromObject(ChinapnrInterface.repayment2("20", ordId, outCustId, outAcctId, amount, inCustId, inAcctId, subOrdId, subOrdDate, fee, "", bgRetUrl));
				if (json.getInt("RespCode") != 0) {
					result = URLDecoder.decode(json.getString("RespDesc"), "utf-8");
					log.info("汇付返回处理结果:" + result);
					return null;
				}
				log.info("汇付返回处理结果:" + URLDecoder.decode(json.getString("RespDesc"), "utf-8"));
			}
			/*********************** 上汇付逾期垫付结束 **************************/
			Map<String, Object> callMap = new HashMap<String, Object>();
			callMap.put("in_pid", idLong);
			callMap.put("in_aid", adminId);
			callMap.put("in_basepath", basePath);
			callMap.put("in_pay_time", new Date());
			callMap.put("in_ifeerate", new BigDecimal(investFeeRate));
			callMap.put("out_ret", -1);
			callMap.put("out_desc", 0);
			borrowDao.callRepaymentOverdueProcedure(callMap);

			ret = Convert.strToLong(callMap.get("out_ret") + "", -1);
			map.put("ret", ret + "");
			map.put("ret_desc", callMap.get("out_desc") + "");
			borrowUserMap = borrowDao.queryBorrowerById(idLong);
			if (borrowUserMap != null) {
				long userId = Convert.strToLong(borrowUserMap.get("publisher") + "", -1);
				userService.updateSign(userId);// 更换校验码
			}
			investorList = borrowDao.queryInvesterById(idLong);
			if (investorList != null) {
				for (Map<String, Object> investorMap : investorList) {
					long userId = Convert.strToLong(investorMap.get("investor") + "", -1);
					userService.updateSign(userId);// 更换校验码
					investorMap = null;
				}
			}
			if (ret <= 0) {
				throw new RuntimeException();
			} else {
				return map;
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

}