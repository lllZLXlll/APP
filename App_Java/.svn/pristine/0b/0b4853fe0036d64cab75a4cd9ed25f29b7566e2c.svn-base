package com.pjzb.interceptor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.pjzb.controller.common.BaseController;
import com.pjzb.entity.User;
import com.pjzb.util.Constants;
import com.pjzb.util.IConstants;
import com.pjzb.util.JSONUtils;

public class FrontLoginInterceptor extends BaseController implements HandlerInterceptor {
	public static Log log = LogFactory.getLog(FrontLoginInterceptor.class);

	private List<String> uncheckUrls;

	public List<String> getUncheckUrls() {
		return uncheckUrls;
	}

	public void setUncheckUrls(List<String> uncheckUrls) {
		this.uncheckUrls = uncheckUrls;
	}

	public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) throws Exception {
	}

	public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) throws Exception {
	}

	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception {
		log.info("============URL=============" + request.getRequestURL());
		log.info("============IP==============" + getRemortIp());
		String requestURI = request.getRequestURI();
		User user = getSessionUserInfo();
		if (IConstants.ISDEMO.equals("1")) {
			requestURI = requestURI.substring(requestURI.indexOf("/pjzb") + 5, requestURI.length());
		}
		log.info("============URI=============" + requestURI);

		Integer closeWeb = (Integer) applicationGetAttribute(Constants.CLOSEWEB);
		if (closeWeb != null && closeWeb==1) {
			if (!uncheckUrls.contains(requestURI.trim())) {
				if (user != null) {
					// 身份存在，放行
					return true;
				} else {
					requestSetAttribute("msg", "您尚未登录");
					Map<String, String> map = new HashMap<String, String>();
					map.put("error", "9999");
					map.put("msg", "您尚未登录");
					JSONUtils.printObject(map, response);
					return false;
				}
			} else {
				return true;
			}
		} else {
			if (!requestURI.equals("/front/closeWeb.do") && !requestURI.equals("/front/indexInit.do")) {
				Map<String, String> map = new HashMap<String, String>();
				map.put("error", "8888");
				map.put("msg", "网站维护中...");
				JSONUtils.printObject(map, response);
				return false;
			} else {
				requestSetAttribute("msg", applicationGetAttribute(Constants.CLOSEWEBCONTENT));
				request.getRequestDispatcher("/WEB-INF/pages/front/close/closeweb.jsp").forward(request, response);
				return false;
			}

		}
	}

}
