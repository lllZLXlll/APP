package com.pjzb.controller.admin;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.pjzb.controller.common.BaseController;
import com.pjzb.entity.BorrowLoanManager;
import com.pjzb.entity.LoanInspect;
import com.pjzb.service.admin.loan.AdminBorrowMonthInspectRecordService;
import com.pjzb.service.admin.loan.AdminMonthInspectService;
import com.pjzb.service.admin.loan.AdminUnDealInspectService;
import com.pjzb.service.admin.loan.RiskDeptMonthInspectService;

/**
 * 贷后管理
 * 
 * 
 */
@Controller
@RequestMapping(value = "/admin")
public class AdminLoanController extends BaseController {
	public static Log log = LogFactory.getLog(AdminLoanController.class);

	@Autowired
	private AdminMonthInspectService adminMonthInspectService;

	@Autowired
	private AdminUnDealInspectService adminUnDealInspectService;

	@Autowired
	private AdminBorrowMonthInspectRecordService adminBorrowMonthInspectRecordService;

	@Autowired
	private RiskDeptMonthInspectService riskDeptMonthInspectService;

	/**
	 * 所有借款
	 */
	@RequestMapping(value = "/loanManageInit")
	public String loanManageInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String borrowTitle, Long borrowStatus, Long borrowWay) {
		return adminMonthInspectService.queryloanManageList(model, tabid, pageCurrent, pageSize, userName, borrowTitle, borrowStatus, borrowWay, getSessionAdminInfo());
	}

	/**
	 * 待处理的月检
	 */
	@RequestMapping(value = "/borrowInspectionInit")
	public String borrowInspectionInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String borrowTitle) {
		return adminUnDealInspectService.queryBorrowInspectionList(model, tabid, pageCurrent, pageSize, userName, borrowTitle, getSessionAdminInfo());
	}

	/**
	 * 
	 * @describe:分页查询贷后月检记录
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/queryBorrowInspectRecord")
	public String queryBorrowInspectRecord(Model model, String tabid, Long borrowId, String realName, String borrowTitle, Integer status, Long pageCurrent, Long pageSize,
			Long inspectId) {
		return adminBorrowMonthInspectRecordService.queryBorrowInspectRecord(model, tabid, borrowId, realName, borrowTitle, status, pageCurrent, pageSize, getSessionAdminInfo()
				.getLoanUserId(), inspectId);
	}

	/**
	 * 
	 * @describe:增加或保存月检初始化
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/saveOrUpdateBorrowMonthInspectInit")
	public String querySaveOrUpdateBorrowMonthInspectInit(Model model, Long id, Long borrowId, String tabid, Long inspectId) {
		return adminBorrowMonthInspectRecordService.querySaveOrUpdateBorrowMonthInspectInit(model, id, borrowId, tabid, inspectId);
	}

	/**
	 * 
	 * @describe:增加或保存月检
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/saveOrUpdateBorrowLoanManager")
	@ResponseBody
	public Map<String, Object> saveOrUpdateBorrowLoanManager(BorrowLoanManager borrowLoanManager, Long borrowId, String visitDate, String tabid, Long inspectId, String recordTime) {
		try {
			return adminBorrowMonthInspectRecordService.saveOrUpdateBorrowLoanManager(borrowLoanManager, borrowId, visitDate, getSessionAdminInfo().getLoanUserId(), tabid,
					inspectId, recordTime);
		} catch (Exception e) {
			e.printStackTrace();
			if (borrowLoanManager.getId() == null) {
				return ajaxDoneInfo("300", "月检记录增加异常", "", "");
			} else {
				return ajaxDoneInfo("300", "月检记录修改异常", "", "");
			}
		}
	}

	/**
	 * 
	 * @describe:上传贷后管理资料或图片初始化
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/uploadLoanAfterDataInit")
	public String uploadLoanAfterDataInit(Model model, Long id, String dialogId, Long inspectId) {
		return adminBorrowMonthInspectRecordService.queryLoanAfterDataInit(model, id, dialogId, inspectId);
	}

	/**
	 * 
	 * @describe:上传贷后管理资料或图片
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/uploadLoanAfterData")
	@ResponseBody
	public Map<String, Object> uploadLoanAfterData(MultipartFile file, String dialogId, HttpServletRequest request, String type, Long id, Long inspectId) {
		try {
			return adminBorrowMonthInspectRecordService.uploadLoanAfterData(file, dialogId, request, type, id, inspectId);
		} catch (Exception e) {
			e.printStackTrace();
			return ajaxDoneInfo("300", "上传异常", "false", "");
		}
	}

	@RequestMapping(value = "/deleteLoanManageMonthInspectData")
	@ResponseBody
	public Map<String, Object> deleteLoanManageMonthInspectData(HttpServletRequest request, String filePath, Long id, String type, Long loanmanagerId, Long inspectId) {
		try {
			return adminBorrowMonthInspectRecordService.deleteLoanManageMonthInspectData(request, id, filePath, type, loanmanagerId, inspectId);
		} catch (Exception e) {
			e.printStackTrace();
			return ajaxDoneInfo("300", "删除异常", "", "");
		}
	}

	/**
	 * 
	 * @describe:风控部所有贷后检查
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/queryAllMonthInspectBorrowList")
	public String queryAllMonthInspectBorrowList(Model model, String tabid, String userName, Integer borrowTypeSubId, Integer borrowStatus, String loanName, String borrowTitle,
			Long pageCurrent, Long pageSize) {
		return riskDeptMonthInspectService.queryMonthInspectBorrowList(model, tabid, userName, borrowTypeSubId, borrowStatus, loanName, borrowTitle, pageCurrent, pageSize);
	}

	/**
	 * 
	 * @describe:增加或保存月检初始化
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/saveOrUpdateRiskDeptMonthInspectInit")
	public String saveOrUpdateRiskDeptMonthInspectInit(Model model, Long id, String tabid, Long borrowId) {
		return riskDeptMonthInspectService.querySaveOrUpdateRiskDeptMonthInspectInit(model, id, tabid, borrowId);
	}

	@RequestMapping(value = "/saveOrUpdateRiskDeptMonthInspect")
	@ResponseBody
	public Map<String, Object> saveOrUpdateRiskDeptMonthInspect(Model model, LoanInspect loanInspect, String tabid, String inspectTimeStr, Long id2, String riskDeptAdvise,
			String mgrAdvise) {
		try {
			return riskDeptMonthInspectService.saveOrUpdateRiskDeptMonthInspect(model, tabid, loanInspect, inspectTimeStr, id2, riskDeptAdvise, mgrAdvise, getSessionAdminInfo());
		} catch (Exception e) {
			e.printStackTrace();
			return ajaxDoneInfo("300", "检查提交异常", "", "");
		}
	}

	/**
	 * 
	 * @describe:风控部贷后检查
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/queryLoanInspectList")
	public String queryLoanInspectList(Model model, String tabid, String userName, Integer borrowTypeSubId, Integer borrowStatus, String loanName, String borrowTitle,
			Long pageCurrent, Long pageSize,Integer inspectStatus) {
		return riskDeptMonthInspectService.queryLoanInspectList(model, tabid, userName, borrowTypeSubId, borrowStatus, loanName, borrowTitle, pageCurrent, pageSize,inspectStatus);
	}
	
	/**
	 * 
	 * @describe:增加或保存月检初始化
	 * @author: xiaojin
	 */
	@RequestMapping(value = "/queryHistoryAdvise")
	public String queryHistoryAdvise(Model model, Long id,Integer type) {
		return riskDeptMonthInspectService.queryHistoryAdvise(model, id, type);
	}

}
