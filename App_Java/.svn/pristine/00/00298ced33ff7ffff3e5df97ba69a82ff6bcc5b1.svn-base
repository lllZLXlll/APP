package com.pjzb.service.admin.declare;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;

import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.LinksDao;
import com.pjzb.entity.Links;
import com.pjzb.service.common.UploadService;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.shove.Convert;
/**
 * 图片管理
 * @author xiaojin
 *
 */
@Service
public class AdminPictureManageService extends BaseController {
	
	@Autowired
	private LinksDao linksDao;
	
	@Autowired
	private UploadService uploadService;

	public String queryIndexRollImgInit(Long pageNum, Long pageSize, Model model, String tabid) {
		try {
			pageNum = pageNum == null ? 1 : pageNum;
			pageSize = pageSize == null ? Constants.PAGE_SIZE_20 : pageSize;
			List<Map<String, Object>> list = linksDao.queryIndexRollImgInfo((pageNum - 1) * pageSize, pageSize);
			long count = linksDao.queryIndexRollImgCount();
			PageBean pageBean = new PageBean();
			pageBean.setPageNum(pageNum);
			pageBean.setPageSize(pageSize);
			pageBean.setTotalNum(count);
			pageBean.setPage(list);
			model.addAttribute("pageBean", pageBean);
			model.addAttribute("tabid", tabid);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************分页查询图片管理异常**************************");
		}
		return "/admin/declare/picturemanage/list.jsp";
	}

	public String addIndexRollImgInit(Model model, String tabid) {
		Map<String, Object> map = linksDao.getMaxIndexRollImgSerial();
		long val = Convert.strToLong(map.get("max(serialCount)")==null?"":map.get("max(serialCount)")+"", 0) + 1;
		model.addAttribute("tabid", tabid);
		model.addAttribute("serialCount", val);
		return "/admin/declare/picturemanage/add.jsp";
	}

	public Map<String, Object> addIndexRollImgInfo(Links links, String tabid) throws RuntimeException{
		links.setPublishTime(new Date());
		long result = linksDao.addIndexRollImgInfo(links);
		try {
			if (result > 0) {
				return ajaxDoneInfo("200", "图片增加成功", "dialog", tabid);
			} else {
				return ajaxDoneInfo("300", "图片增加失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("******************图片增加异常*****************");
		}
	}

	public Map<String, Object> uploadPicture(MultipartFile file, String dialogId, HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			String fileName = ConvertUtil.dateConvert(new Date(), Constants.DATEYM_MILLI) + ".jpg";
			String savePath = ConvertUtil.getUploadPath("/picturemanage/");
			String uploadResult = uploadService.upload(file, savePath, fileName, dialogId, request);
			if (uploadResult.equals(Constants.SUCCESS)) {
				map.put("companyImg", "../" + savePath + fileName);
				map.put("statusCode", "200");
				map.put("message", "上传成功");
			} else {
				map.put("statusCode", "300");
				map.put("message", "上传失败");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("******************上传图片异常*****************");
			map.put("statusCode", "300");
			map.put("message", "上传异常");
		}
		return map;
	}

	public String updateIndexRollImgInit(Model model, String tabid, Long id) {
		try {
			model.addAttribute("picture", linksDao.queryIndexRollImgInit(id));
			model.addAttribute("tabid", tabid);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("*********************根据id查询图片管理异常**************************");
		}
		return "/admin/declare/picturemanage/edit.jsp";
	}

	public Map<String, Object> updateIndexRollImg(Links links, String tabid) {
		links.setPublishTime(new Date());
		long result = linksDao.updateIndexRollImg(links);
		try {
			if (result > 0) {
				return ajaxDoneInfo("200", "图片修改成功", "dialog", tabid);
			} else {
				return ajaxDoneInfo("300", "图片修改失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("*************修改图片异常***************");
		}
	}

	public Map<String, Object> deleteIndexRollImg(Long id) {
		try {
			long result = linksDao.deleteIndexRollImg(id);
			if (result > 0) {
				return ajaxDoneInfo("200", "删除成功", "", "");
			} else {
				return ajaxDoneInfo("300", "删除失败", "", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("**************图片删除异常****************");
		}
	}

	public Map<String, Object> deleteIndexRollImgByIds(String delids) {
		List<Long> list = new ArrayList<Long>();
		try {
			log.info("************批量删除图片delids***********" + delids);
			String[] ids = delids.split(",");
			for (int i = 0; i < ids.length; i++) {
				list.add(Convert.strToLong(ids[i] + "", 1L));
			}
			long result = linksDao.deleteIndexRollImgByIds(list);
			if (result > 0) {
				return ajaxDoneInfo("200", "图片批量删除成功", "", "");
			} else {
				return ajaxDoneInfo("300", "图片批量删除失败", "", "");
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new RuntimeException("***************批量删除图片异常******************");
		}
	}

}
