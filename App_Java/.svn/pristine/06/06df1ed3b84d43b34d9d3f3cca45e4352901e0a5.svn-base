package com.pjzb.controller.front;

import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.SlbaoDao;
import com.pjzb.dao.UserDao;
import com.pjzb.entity.User;
import com.pjzb.service.chinapnr.ChinapnrInterface;
import com.pjzb.service.front.MyManageService;
import com.pjzb.util.Constants;
import com.pjzb.util.IConstants;

/**
 * 借款管理、投资管理
 * 
 * @author xiaojin
 * 
 */
@Controller
@RequestMapping(value = "/front")
public class FrontMyManageController extends BaseController {
	public static Log log = LogFactory.getLog(FrontMyManageController.class);

	@Autowired
	private MyManageService myManageService;
	
	@Autowired
	private UserDao userDao;
	
	@Autowired
	private SlbaoDao slbaoDao; 

	/**
	 * 投资管理
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/investmentManage")
	@ResponseBody
	public Map<String, Object> investmentManage() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.queryInvestManage(jsonObject, getSessionUserId(), chosese(),
					Constants.PAGE_SIZE_10));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "投资管理查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 收款明细
	 * 
	 * @return
	 */
	@RequestMapping(value = "/getMoneyDetail")
	@ResponseBody
	public Map<String, Object> getMoneyDetail() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(
					myManageService.getMoneyDetail(jsonObject, getSessionUserId(), Constants.PAGE_SIZE_10, chosese()));
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", " 收款明细查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 借款管理
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/borrowManageList")
	@ResponseBody
	public Map<String, Object> borrowManageList() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.queryborrowManage(jsonObject, getSessionUserId(), Constants.PAGE_SIZE_10,
					chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "借款管理查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 借款管理-》 查看合同
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryPactList")
	@ResponseBody
	public Map<String, Object> queryPactList() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.queryHetongList(jsonObject, 5L));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "协议查看异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 还款明细列表
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/repaymentDetail")
	@ResponseBody
	public Map<String, Object> repaymentDetail() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.queryRepaymentDetail(jsonObject, getSessionUserId(), Constants.PAGE_SIZE_10,
					chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "还款明细查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 还款明细（明细）
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/findPayingDetailsByBorrowId")
	@ResponseBody
	public Map<String, Object> findPayingDetailsByBorrowId() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.findPayingDetailsByBorrowId(jsonObject, Constants.PAGE_SIZE_5, chosese()));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "还款明细查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 还款明细（还款）
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/findMyPayData")
	@ResponseBody
	public Map<String, Object> findMyPayData() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.findMyPayData(jsonObject));
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "还款异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 验证密码还款
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/referPay")
	@ResponseBody
	public Map<String, Object> referPay() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}

			jsonMap = myManageService.updateReferPay(jsonObject, getSessionUserId(), getBasePath(), chosese());
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "还款异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 自动还款设置
	 * 
	 * @throws Exception
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/autoRepaymentInit")
	@ResponseBody
	public Map<String, Object> autoRepaymentInit() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			jsonMap.putAll(myManageService.queryAutoRepayment(getSessionUserId()));
			return jsonMap;
		} catch (Exception e) {
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询自动投标异常");
			log.error(e);
			e.printStackTrace();
			return jsonMap;
		}
	}

	/**
	 * 自动还款设置
	 */
	@RequestMapping(value = "/autoRepayment")
	@ResponseBody
	public Map<String, Object> autoRepayment() {
		// JSONObject obj = new JSONObject();
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		JSONObject json = getAjaxParam();
		int state = Integer.parseInt(json.get("state").toString());

		long result = -1;

		result = myManageService.addAutoRepayment(getSessionUserId(), state);

		if (result <= 0) {
			jsonMap.put("error", "1");
			jsonMap.put("msg", "设置失败，请稍后再试！");
			return jsonMap;
		}
		jsonMap.put("error", "0");
		jsonMap.put("msg", "设置成功！");
		return jsonMap;
	}

	@RequestMapping(value = "/findBorrowForpayDetail")
	@ResponseBody
	public Map<String, Object> findBorrowForpayDetail() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap.putAll(myManageService.findBorrowForpayDetail(jsonObject, getSessionUserId()));
		} catch (Exception e) {
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询异常");
			log.error(e);
			e.printStackTrace();
		}
		return jsonMap;
	}

	/**
	 * @describe:查询生利宝转入转出记录
	 */
	@RequestMapping(value = "/querySlbRollOutRecord")
	@ResponseBody
	public Map<String, Object> querySlbRollOutRecord() throws Exception {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "404");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			User user = getSessionUserInfo();
			Integer type = Integer.parseInt(String.valueOf(jsonObject.get("type")));
			Long pageno = Long.parseLong(jsonObject.getString("curPage"));
			String startTime = jsonObject.getString("startTime");
			String endTime = jsonObject.getString("endTime");
			List<Map<String, Object>> list = slbaoDao.querySlbaRecordByType(user.getId(), type, (pageno - 1) * IConstants.PAGE_SIZE_6_LONG,
					IConstants.PAGE_SIZE_6_LONG, startTime, endTime);
			long count = slbaoDao.querySlbaRecordCountByType(user.getId(), type, startTime, endTime);
			PageBean pageBean = new PageBean();
			pageBean.setPageSize(IConstants.PAGE_SIZE_6);
			pageBean.setPageNum(pageno);
			pageBean.setTotalNum(count);
			pageBean.setPage(list);
			ChinapnrInterface.queryShengLiBaoInfo("");
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
			jsonMap.put("pageBean", pageBean);
			return jsonMap;
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询异常");
			return jsonMap;
		}
	}

	/**
	 * 
	 * @describe:查询生利宝产品信息
	 */
	@RequestMapping(value = "/querShengLiBaoInfo")
	@ResponseBody
	public Map<String, Object> querShengLiBaoInfo() throws Exception {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			User user = (User) session().getAttribute(IConstants.SESSION_USER);
			String ipayAccount = user.getIpayAccount();
			if (ipayAccount == null || ipayAccount.trim().length() == 0 || ipayAccount.equals("null")) {
				jsonMap.put("error", "1");
				jsonMap.put("ipayAccount", ipayAccount);
				jsonMap.put("msg", "您未注册汇付天下");
				return jsonMap;
			}
			JSONObject jsonObject = JSONObject.fromObject(ChinapnrInterface.queryShengLiBaoInfo(""));
			log.info("生利宝产品信息:===" + jsonObject);
			// JSONObject
			// slbAccountJsonObject=JSONObject.fromObject(ChinaPnRInterface.queryShengLiBaoAccount(user.getIpayAccount()));
			// log.info("生利宝账户信息："+slbAccountJsonObject);
			DecimalFormat df3 = new DecimalFormat("0.000");
			DecimalFormat df2 = new DecimalFormat("0.00");
			jsonMap.put("annuRate", df3.format(Double.parseDouble(String.valueOf(jsonObject.get("AnnuRate")))));
			jsonMap.put("prdRate", df3.format(Double.parseDouble(String.valueOf(jsonObject.get("PrdRate")))));
			String totalAsset = user.getSlbaoTotalAmt() + "";
			String totalProfit = user.getSlbaoAccumulatedIncome() + "";
			totalAsset = totalAsset.equals("null") ? "0.00" : totalAsset;
			totalProfit = totalProfit.equals("null") ? "0.00" : totalProfit;
			jsonMap.put("totalAsset", df2.format(Double.parseDouble(totalAsset)));
			jsonMap.put("totalProfit", df2.format(Double.parseDouble(totalProfit)));
			jsonMap.put("error", "0");
			jsonMap.put("ipayAccount", ipayAccount);
			jsonMap.put("msg", "生利宝信息查询成功");
			return jsonMap;
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "2");
			jsonMap.put("msg", "生利宝信息查询异常");
			return jsonMap;
		}
	}

	/**
	 * @describe:查询生利宝收益记录
	 */
	@RequestMapping(value = "/queryEarnRecord")
	@ResponseBody
	public Map<String, Object> queryEarnRecord() throws Exception {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "404");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			User user = (User) session().getAttribute(IConstants.SESSION_USER);
			Long pageno = Long.parseLong(jsonObject.getString("curPage"));
			String startTime = jsonObject.get("startTime")+"";
			String endTime = jsonObject.get("endTime")+"";
			List<Map<String, Object>> list = slbaoDao.querySlbaEarnRecordByUserId(user.getId(), (pageno - 1) * IConstants.PAGE_SIZE_6_LONG,
					IConstants.PAGE_SIZE_6_LONG, startTime, endTime);
			long count = slbaoDao.querySlbaEarnRecordCountByUserId(user.getId(), startTime,
					endTime);
			PageBean pageBean = new PageBean();
			pageBean.setPageSize(IConstants.PAGE_SIZE_6);
			pageBean.setPageNum(pageno);
			pageBean.setTotalNum(count);
			pageBean.setPage(list);
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
			jsonMap.put("pageBean", pageBean);
			return jsonMap;
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "生利宝收益查询异常");
			return jsonMap;
		}
	}

}
