package com.pjzb.controller.front;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.service.front.AccountSettingsService;
import com.pjzb.util.Constants;
import com.pjzb.util.IConstants;
import com.shove.Convert;

import net.sf.json.JSONObject;

/**
 * 前端Controller 邀请好友二维码、银行卡、 自动还款设置、安全中心数据、消息中心、绑定邮箱、根据id查询消息、更换绑定手机号码
 * 查询手势密码、增加手势密码 、修改手势密码、关闭手势密码、开启手势密码、校验手势密码 、
 * 
 * @author xiaojin
 * 
 */
@Controller
@RequestMapping(value = "/front")
public class FrontAccountSettingsController extends BaseController {
	public static Log log = LogFactory.getLog(FrontAccountSettingsController.class);

	@Autowired
	private AccountSettingsService accountSettingsService;

	/**
	 * 我的银行卡
	 * 
	 * @return
	 * @throws IOException
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryBankList")
	@ResponseBody
	public Map<String, Object> queryBankList() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			// Map<String, String> authMap = getAppAuthMap(response());
			JSONObject jsonObject = getAjaxParam();
			long userId = Convert.strToLong(jsonObject.get("uid") + "", -1);
			jsonMap = accountSettingsService.queryBankLists(userId);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("msg", "5");
			jsonMap.put("msg", "查询银行卡异常");
		}
		return jsonMap;
	}

	/**
	 * 添加银行卡
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/addBankInfo")
	@ResponseBody
	public Map<String, Object> addBankInfo() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			jsonMap.putAll(accountSettingsService.addBankInfo(jsonObject, getSessionUserId(), getBasePath(), chosese()));
		} catch (Exception e) {
			jsonMap.put("error", "2");
			jsonMap.put("msg", "添加银行卡异常，" + Constants.CUSTOMER_MSG);
			log.error(e);
			e.printStackTrace();
		}
		return jsonMap;
	}

	/**
	 * 消息中心
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/querySysMails2")
	@ResponseBody
	public Map<String, Object> querySysMails2() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			Long id = getSessionUserId();// 获得用户编号
			jsonMap = accountSettingsService.queryReceiveMails(jsonObject, id, IConstants.MALL_TYPE_SYS, "sys", IConstants.PAGE_SIZE_10, IConstants.MAIL_SYS_, chosese());
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "消息中心查询异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 查询邮件内容2
	 * 
	 * @return
	 */
	@RequestMapping(value = "/queryEmailById2")
	@ResponseBody
	public Map<String, Object> queryEmailById2() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();

		String mailIdStr = requestGetParameter("mailId") + "";
		Long mailId = 0l;
		if (mailIdStr != null && !mailIdStr.equals("")) {
			mailId = Long.parseLong(mailIdStr);
		}
		int type = Integer.parseInt(requestGetParameter("type") + "");

		try {
			jsonMap = accountSettingsService.updateEmailById(getSessionUserInfo(), mailId, type);

			// request().setAttribute("sender", sender);
			// request().setAttribute("receiver", receiver);
			// request().setAttribute("title", title);
			// request().setAttribute("date", date);
			// request().setAttribute("content", content);
			// request().setAttribute("curPage", curPage);
			// if (mt == 100) {
			// request().setAttribute("mType", 100);
			// } else {
			// request().setAttribute("mType",
			// Convert.strToInt(map.get("mailType") + "", 0));
			// }
		} catch (Exception e) {
			log.error(e);
			jsonMap.put("error", "1");
			jsonMap.put("msg", "查询邮件内容异常，" + Constants.CUSTOMER_MSG);
			e.printStackTrace();
		}
		return jsonMap;
	}

	/**
	 * 删除消息
	 * 
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/deleteSysMails2")
	@ResponseBody
	public Map<String, Object> deleteMails2() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		String ids;
		try {
			ids = requestGetParameter("ids");
			String[] allIds = ids.split(",");// 进行全选删除的时候获得多个id值
			if (allIds.length > 0) {
				long tempId = 0;
				for (String str : allIds) {
					tempId = Convert.strToLong(str, -1);
					if (tempId == -1) {
						jsonMap.put("error", "1");
						jsonMap.put("msg", "删除数据异常");
					}
				}
			} else {
				jsonMap.put("error", "2");
				jsonMap.put("msg", "请选择删除的记录");
			}
			accountSettingsService.deleteMails(ids, getSessionUserId());
			jsonMap.put("error", "0");
			jsonMap.put("msg", "删除成功");
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			jsonMap.put("error", "3");
			jsonMap.put("msg", "删除消息异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 更新邮件状态2
	 * 
	 * @return
	 */
	@RequestMapping(value = { "/updateSys2Readed2", "/updateSys2UNReaded2" })
	@ResponseBody
	public Map<String, Object> updateMail2() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			jsonMap = accountSettingsService.updateMail2();
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "更新邮件状态异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}
}
