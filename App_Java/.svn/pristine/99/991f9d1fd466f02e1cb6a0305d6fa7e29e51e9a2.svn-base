package com.pjzb.controller.admin;

import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.entity.Redmoneyrecord;
import com.pjzb.service.admin.fund.AdminBankcardService;
import com.pjzb.service.admin.fund.AdminChinapnrDebitAccountsService;
import com.pjzb.service.admin.fund.AdminChinapnrMerchantQueryService;
import com.pjzb.service.admin.fund.AdminChinapnrRechargeService;
import com.pjzb.service.admin.fund.AdminChinapnrTranStatusQueryService;
import com.pjzb.service.admin.fund.AdminChinapnrWithdrawService;
import com.pjzb.service.admin.fund.AdminEenterpriseFundService;
import com.pjzb.service.admin.fund.AdminRechWithdrawService;
import com.pjzb.service.admin.fund.AdminRechargeManageService;
import com.pjzb.service.admin.fund.AdminRechargeRecordService;
import com.pjzb.service.admin.fund.AdminReleaseRepayRecordService;
import com.pjzb.service.admin.fund.AdminUserFundService;
import com.pjzb.service.admin.fund.AdminVoucherService;

/**
 * 资金管理Controller
 * 
 * 
 */
@Controller
@RequestMapping(value = "/admin")
public class AdminFundController extends BaseController {
	public static Log log = LogFactory.getLog(AdminFundController.class);

	@Autowired
	private AdminUserFundService adminUserFundService;

	@Autowired
	private AdminRechargeManageService adminRechargeManageService;

	@Autowired
	private AdminVoucherService adminVoucherService;

	@Autowired
	private AdminBankcardService adminBankcardService;

	@Autowired
	private AdminRechWithdrawService adminRechWithdrawService;

	@Autowired
	private AdminEenterpriseFundService adminEenterpriseFundService;

	@Autowired
	private AdminRechargeRecordService adminRechargeRecordService;

	@Autowired
	private AdminChinapnrMerchantQueryService adminChinapnrMerchantQueryService;

	@Autowired
	private AdminChinapnrTranStatusQueryService adminChinapnrTranStatusQueryService;

	@Autowired
	private AdminChinapnrDebitAccountsService adminChinapnrDebitAccountsService;

	@Autowired
	private AdminChinapnrWithdrawService adminChinapnrWithdrawService;

	@Autowired
	private AdminChinapnrRechargeService adminChinapnrRechargeService;

	@Autowired
	private AdminReleaseRepayRecordService adminReleaseRepayRecordService;

	/**
	 * 用户资金管理
	 */
	@RequestMapping(value = "/userFundInit")
	public String userFundInit(Model model, Long pageCurrent, Long pageSize, String userName, String realName, Double usableSumMin, Double usableSumMax) {
		return adminUserFundService.queryUserFundList(model, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, userName, realName, usableSumMin,
				usableSumMax);
	}

	/**
	 * 充值记录
	 */
	@RequestMapping(value = "/queryUserFundRechargeInit")
	public String queryUserFundRechargeInit(Model model, String tabid, Long pageCurrent, Long pageSize, String startTime, String endTime, String rechargeType, String state,
			String id) {
		return adminUserFundService.queryUserFundRechargeInit(model, tabid, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, startTime, endTime,
				rechargeType, state, id);
	}

	/**
	 * 充值记录 导出
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/exportUserFundRecharge")
	@ResponseBody
	public void exportUserFundRecharge(Model model, HttpServletResponse response, String id) {
		adminUserFundService.exportUserFundRecharge(response, id);
	}

	/**
	 * 提现记录
	 */
	@RequestMapping(value = "/queryUserFundWithdrawInit")
	public String queryUserFundWithdrawInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String startTime, String endTime, Double sum,
			String state, String id) {
		return adminUserFundService.queryUserFundWithdrawList(model, tabid, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, userName, startTime,
				endTime, sum, state, id);
	}

	/**
	 * 提现记录 导出
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/exportUserFundWithdraw")
	@ResponseBody
	public void exportUserFundWithdraw(Model model, HttpServletResponse response, String id) {
		adminUserFundService.exportUserFundWithdraw(response, id);
	}

	/**
	 * 资金记录
	 */
	@RequestMapping(value = "/queryUserFundrecordInit")
	public String queryUserFundrecordInit(Model model, String tabid, Long pageCurrent, Long pageSize, String id, String userName) {
		return adminUserFundService.queryUserFundRecordList(model, tabid, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, id, userName);
	}

	/**
	 * 充值管理
	 * 
	 * @param model
	 * @param pageCurrent
	 * @param pageSize
	 * @param tabid
	 * @param userName
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryUserCashListInit")
	public String queryUserCashListInit(Model model, Long pageCurrent, Long pageSize, String tabid, String userName) {
		return adminRechargeManageService.queryUserCashListForPage(model, tabid, pageCurrent, pageSize, userName);
	}

	/**
	 * 资金明细
	 */
	@RequestMapping(value = "/queryAllUserFundRecordInit")
	public String queryAllUserFundRecordInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName) {
		return adminUserFundService.queryAllUserFundRecordList(model, tabid, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, userName);
	}

	/**
	 * 资金明细 导出全部
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/exportAllUserFundRecord")
	@ResponseBody
	public Map<String, Object> exportAllUserFundRecord(Model model, String tabid, HttpServletResponse response) {
		try {
			adminUserFundService.exportAllUserFundRecord(response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************资金明细导出所有用户所有信息异常***************************");
			return ajaxDoneInfo("300", "资金明细导出所有用户所有信息异常！", "", tabid.substring(0, tabid.indexOf(",")));
		}
		return null;
	}

	/**
	 * 银行卡管理
	 */
	@RequestMapping(value = "/queryUserBankInit")
	public String queryUserBankInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String realName, String startTime, String endTime) {
		try {
			return adminBankcardService.queryUserBankInit(model, tabid, pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, userName, realName, startTime,
					endTime);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 查看银行卡详情
	 */
	@RequestMapping(value = "/queryBankCardInfo")
	public String queryBankCardInfo(Model model, String tabid, String bankId) {
		try {
			return adminBankcardService.queryBankCardInfo(model, tabid, bankId);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 充值提现审核
	 */
	@RequestMapping(value = "/queryAllWithdrawInit")
	public String queryAllWithdrawInit(Model model, Long pageCurrent, Long pageSize, String userName, String state, String startTime, String endTime) {
		try {
			return adminRechWithdrawService.queryAllWithdrawInit(model, "submenu-tab-50", pageCurrent == null ? 1l : pageCurrent, pageSize == null ? 20l : pageSize, userName,
					state, startTime, endTime);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 提现查看详情
	 */
	@RequestMapping(value = "/queryWithdrawShowInfo")
	public String queryWithdrawShowInfo(Model model, String tabid, String id) {
		try {
			return adminRechWithdrawService.queryWithdrawShowInfo(model, tabid, id);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 提现审核跳转页面
	 */
	@RequestMapping(value = "/queryWithdrawInfo")
	public String queryWithdrawInfo(Model model, String tabid, String id) {
		try {
			adminRechWithdrawService.queryWithdrawShowInfo(model, tabid, id);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return "/admin/fund/rechwithdraw/update.jsp";
	}

	/**
	 * 提现审核
	 */
	@RequestMapping(value = "/updateWithdrawCheck")
	@ResponseBody
	public Map<String, Object> updateWithdrawCheck(Model model, String tabid, String id, Integer status, double sum, double poundage, String remark, String userId, String trxId) {
		try {
			return adminRechWithdrawService.updateWithdrawCheck(model, tabid, id, status, sum, poundage, remark, userId, trxId);
		} catch (Exception e) {
			log.error("*************************提现审核异常****************************");
			log.error(e);
			e.printStackTrace();
			return ajaxDoneInfo("300", "提现审核异常", "", "");
		}
	}

	/**
	 * 提现审核 批量
	 */
	@RequestMapping(value = "/updateWithdrawChecks")
	@ResponseBody
	public Map<String, Object> updateWithdrawChecks(Model model, String tabid, String ids) {
		try {
			return adminRechWithdrawService.updateWithdrawChecks(model, tabid, ids);
		} catch (Exception e) {
			log.error("*************************提现批量审核异常****************************");
			log.error(e);
			e.printStackTrace();
			return ajaxDoneInfo("300", "提现批量审核异常", "", "");
		}
	}

	/**
	 * 转账跳转页面
	 */
	@RequestMapping(value = "/queryWithdrawTransInfo")
	public String queryWithdrawTransInfo(Model model, String tabid, String id) {
		try {
			adminRechWithdrawService.queryWithdrawShowInfo(model, tabid, id);
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return "/admin/fund/rechwithdraw/transfer.jsp";
	}

	/**
	 * 转账 批量
	 */
	@RequestMapping(value = "/updateWithdrawTransfers")
	@ResponseBody
	public Map<String, Object> updateWithdrawTransfers(Model model, String tabid, String ids1) {
		try {
			return adminRechWithdrawService.updateWithdrawTransfers(model, tabid, ids1, getBasePath());
		} catch (Exception e) {
			log.error("*************************转账异常****************************");
			log.error(e);
			e.printStackTrace();
			return ajaxDoneInfo("300", "转账异常", "", "");
		}
	}

	/**
	 * 转账
	 */
	@RequestMapping(value = "/updateWithdrawTransfer")
	@ResponseBody
	public Map<String, Object> updateWithdrawTransfer(Model model, String tabid, String id, Integer status, double sum, double poundage, String billcode, String userId,
			String trxId, String usrCustId) {
		try {
			return adminRechWithdrawService.updateWithdrawTransfer(model, tabid, id, status, sum, poundage, billcode, userId, trxId, usrCustId, getBasePath());
		} catch (Exception e) {
			log.error("*************************转账异常****************************");
			log.error(e);
			e.printStackTrace();
			return ajaxDoneInfo("300", "转账异常", "", "");
		}
	}

	/**
	 * 全部提现 导出
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/exportAllWithdraw")
	@ResponseBody
	public Map<String, Object> exportAllWithdraw(Model model, String tabid, String userName, String state, String startTime, String endTime, HttpServletResponse response) {
		try {
			adminRechWithdrawService.exportAllWithdraw(getParam(userName), getParam(state), getParam(startTime), getParam(endTime), response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************全部提现导出异常***************************");
			return ajaxDoneInfo("300", "全部提现导出异常！", "", tabid.substring(0, tabid.indexOf(",")));
		}
		return null;
	}

	public String getParam(String str) {
		return str.substring(str.lastIndexOf(",") + 1, str.length());
	}

	/**
	 * 
	 * @describe:分页查询代、现金券
	 * @author xiaojin
	 * @return
	 */
	@RequestMapping(value = "/redmoneyrecordInit")
	public String redmoneyrecordInit(Model model, String userName, String redmoneytype, Integer usestatus,
			Long pageCurrent, Long pageSize, String tabid, String realName, Double money, String startTime,
			String endTime) {
		return adminVoucherService.queryRedmoneyrecordForPage(userName, redmoneytype, usestatus, pageCurrent, pageSize,
				model, tabid, realName, money, startTime, endTime);
	}
	
	/**
	 * 
	 * @describe:分页查询体验金
	 */
	@RequestMapping(value = "/queryUserMoeryInit")
	public String queryUserMoeryInit(Model model, String userName, Integer status, Long pageCurrent, Long pageSize,
			String tabid, String realName, Double money, String startTime, String endTime, String startTime1, String endTime1) {
		return adminVoucherService.queryUserMoeryInit(userName, status, pageCurrent, pageSize, model, tabid, realName,
				money, startTime, endTime, startTime1, endTime1);
	}

	/**
	 * 
	 * @describe:增加代、现金券
	 * @author xiaojin
	 * @return
	 */
	@RequestMapping(value = "/addRedmoneyrecord")
	@ResponseBody
	public Map<String, Object> addRedmoneyrecord(String userId, String sum, Redmoneyrecord redmoneyrecord, Model model, String tabid) {
		String flag = "";
		try {
			String redmoneytype = redmoneyrecord.getRedmoneytype();
			if (redmoneytype.equals("1")) {
				flag = "代金券";
			} else {
				flag = "现金券";
			}
			return adminVoucherService.addRedmoneyrecord(userId, sum, redmoneyrecord, model, tabid, getRemortIp(), flag);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			return ajaxDoneInfo("300", flag + "增加异常", "", "");
		}
	}

	/**
	 * 
	 * @describe:增加代、现金券初始化
	 * @author: xiaojin
	 * @return
	 */
	@RequestMapping(value = "/addRedmoneyrecordInit")
	public String addRedmoneyrecordInit(Model model, String tabid) {
		return adminVoucherService.addRedmoneyrecordInit(model, tabid);
	}

	/**
	 * 企业资金记录管理 查询
	 */
	@RequestMapping(value = "/companyFundRecordInit")
	public String companyFundRecordInit(Model model, String tabid, Long pageCurrent, Long pageSize, String riskInCome, String riskSpending, String beginRiskDate,
			String endRiskDate, String riskType, String resource) {
		return adminEenterpriseFundService
				.queryCompanyFundRecordInit(model, tabid, pageCurrent, pageSize, riskInCome, riskSpending, beginRiskDate, endRiskDate, riskType, resource);
	}

	/**
	 * 企业资金记录管理 导出
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/exportCompanyFundRecord")
	@ResponseBody
	public Map<String, Object> exportCompanyFundRecord(Model model, String tabid, HttpServletResponse response) {
		try {
			adminEenterpriseFundService.exportCompanyFundRecord(response);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************全部企业资金记录管理导出异常***************************");
			return ajaxDoneInfo("300", "全部企业资金记录管理导出异常！", "", tabid.substring(0, tabid.indexOf(",")));
		}
		return null;
	}

	/**
	 * 企业资金记录管理 添加初始化
	 */
	@RequestMapping(value = "/addCompanyFundRecordInit")
	public String addCompanyFundRecordInit(Model model, String tabid) {
		model.addAttribute("tabid", tabid);
		return "/admin/fund/enterprisefund/add.jsp";
	}

	/**
	 * 企业资金记录管理 添加
	 * 
	 * @author: zlx
	 */
	@RequestMapping(value = "/addCompanyFundRecord")
	@ResponseBody
	public Map<String, Object> addCompanyFundRecord(Model model, String tabid, String riskType, String riskInCome, String riskSpending, String resource) {
		try {
			return adminEenterpriseFundService.addCompanyFundRecord(tabid, riskType, riskInCome, riskSpending, resource);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			log.info("**********************添加企业资金记录管理异常***************************");
			return ajaxDoneInfo("300", "添加企业资金记录管理异常！", "", "");
		}
	}

	/**
	 * 充值记录初始化
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @param userName
	 * @param beginTime
	 * @param endTime
	 * @param rechargeType
	 * @param result
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryRechargeRecordInit")
	public String queryRechargeRecordInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String beginTime, String endTime, Long rechargeType,
			Long result) {
		return adminRechargeRecordService.queryRechargeRecordInit(model, tabid, pageCurrent, pageSize, userName, beginTime, endTime, rechargeType, result);
	}

	/**
	 * 导出充值记录
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param userName
	 * @param beginTime
	 * @param endTime
	 * @param rechargeType
	 * @param result
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportRechargeRecord")
	@ResponseBody
	public void exportRechargeRecord(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String userName, String beginTime, String endTime,
			Long rechargeType, Long result) {
		adminRechargeRecordService.exportRechargeRecord(response, pageCurrent, pageSize, userName, beginTime, endTime, rechargeType, result);
	}

	/**
	 * 第一次充值查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @param userName
	 * @param beginTime
	 * @param endTime
	 * @param rechargeType
	 * @param result
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryRechargeFirstInit")
	public String queryRechargeFirstInit(Model model, String tabid, Long pageCurrent, Long pageSize, String userName, String beginTime, String endTime, Long rechargeType) {
		return adminRechargeRecordService.queryRechargeFirstInit(model, tabid, pageCurrent, pageSize, userName, beginTime, endTime, rechargeType);
	}

	/**
	 * 导出第一次充值记录
	 * 
	 * @param model
	 * @param response
	 * @param pageCurrent
	 * @param pageSize
	 * @param userName
	 * @param beginTime
	 * @param endTime
	 * @param rechargeType
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/exportRechargeFirst")
	@ResponseBody
	public void exportRechargeFirst(Model model, HttpServletResponse response, Long pageCurrent, Long pageSize, String userName, String beginTime, String endTime, Long rechargeType) {
		adminRechargeRecordService.exportRechargeFirst(response, pageCurrent, pageSize, userName, beginTime, endTime, rechargeType);
	}

	/**
	 * 查看第一次充值记录
	 * 
	 * @param model
	 * @param id
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryOneFirstChargeDetails")
	public String queryOneFirstChargeDetails(Model model, String id) {
		return adminRechargeRecordService.queryOneFirstChargeDetails(model, id);
	}

	/**
	 * 汇付商户子账户信息查询
	 * 
	 * @param model
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryAcctsIndex")
	public String queryAcctsIndex(Model model) {
		return adminChinapnrMerchantQueryService.queryAcctsIndex(model);
	}

	/**
	 * 汇付交易状态查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/TranStatusQueryIndex")
	public String TranStatusQueryIndex(Model model, String tabid, Long pageCurrent, Long pageSize) {
		return adminChinapnrTranStatusQueryService.queryTranStatusQueryIndex(model, tabid, pageCurrent, pageSize);
	}

	/**
	 * 查看汇付商户扣款信息
	 * 
	 * @param model
	 * @param billcode
	 * @param investTime
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/TranStatusQuery")
	public String TranStatusQuery(Model model, String billcode, String investTime) {
		return adminChinapnrTranStatusQueryService.queryTranStatusQuery(model, billcode, investTime);
	}

	/**
	 * 汇付商户扣款对账查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/trfReconciliationIndex")
	public String trfReconciliationList(Model model, String tabid, Long pageCurrent, Long pageSize) {
		return adminChinapnrDebitAccountsService.querytrfReconciliationList(model, tabid, pageCurrent, pageSize);
	}

	/**
	 * 体验金扣款对账查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/experGoldDeduction")
	public String experGoldDeduction(Model model, String tabid, Long pageCurrent, Long pageSize) {
		return adminChinapnrDebitAccountsService.queryExperGoldDeduction(model, tabid, pageCurrent, pageSize);
	}

	/**
	 * 汇付取现对账查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/cashReconciliationIndex")
	public String cashReconciliationIndex(Model model, String tabid, Long pageCurrent, Long pageSize) {
		return adminChinapnrWithdrawService.queryCashReconciliationIndex(model, tabid, pageCurrent, pageSize);
	}

	/**
	 * 汇付充值对账查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/saveReconciliation")
	public String saveReconciliation(Model model, String tabid, Long pageCurrent, Long pageSize) {
		return adminChinapnrRechargeService.querySaveReconciliation(model, tabid, pageCurrent, pageSize);
	}

	/**
	 * 放还款对账信息查询
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @param investCustId
	 * @param borrCustId
	 * @param queryTransType
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryReconciliationInit")
	public String queryReconciliationInit(Model model, String tabid, Long pageCurrent, Long pageSize, String investCustId, String borrCustId, String queryTransType) {
		return adminReleaseRepayRecordService.queryReconciliationInit(model, tabid, pageCurrent, pageSize, investCustId, borrCustId, queryTransType);
	}

	/**
	 * 查看分账信息详情
	 * 
	 * @param model
	 * @param tabid
	 * @param pageCurrent
	 * @param pageSize
	 * @param ordId
	 * @return
	 * @author Li zeyang
	 */
	@RequestMapping(value = "/queryDivide_Account")
	public String queryDivide_Account(Model model, String tabid, Long pageCurrent, Long pageSize, String ordId) {
		return adminReleaseRepayRecordService.queryDivide_Account(model, tabid, pageCurrent, pageSize, ordId);
	}
}
