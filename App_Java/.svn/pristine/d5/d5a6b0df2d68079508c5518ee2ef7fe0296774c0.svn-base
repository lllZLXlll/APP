package com.pjzb.controller.app;


import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.pjzb.controller.common.BaseController;
import com.pjzb.entity.GesturesPassword;
import com.pjzb.entity.User;
import com.pjzb.service.common.OperationLogService;
import com.pjzb.service.common.SafeCenterService;
import com.pjzb.service.common.UserService;
import com.pjzb.util.AppUtil;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.pjzb.util.IConstants;

import net.sf.json.JSONObject;

@Controller
@RequestMapping(value = "/reactapp")
public class AppSafeCenterController extends BaseController{
	public static Log log = LogFactory.getLog(AppSafeCenterController.class);

	@Autowired
	private SafeCenterService safeCenterService;
	
	@Autowired
	private OperationLogService operationLogService;
	
	@Autowired
	private UserService userService;

	/**
	 * 获取安全中心数据
	 * @return
	 */
	@RequestMapping(value = "/safeCenterData")
	@ResponseBody
	public Map<String, Object> safeCenterData() {
		Map<String, Object> jsonMap=new HashMap<String, Object>();
		try { 
			JSONObject jsonObject=requestAppJSONGetAttribute();
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			String tab_type = requestGetParameter("tab_type") == null ? null : requestGetParameter("tab_type");
			String yy = requestGetParameter("yy") == null ? null : requestGetParameter("yy");
			 
			jsonMap.putAll(safeCenterService.checkSafeCenterData(userId,tab_type,yy,Constants.REACTAPP)); 
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			jsonMap.put("error", "1");
			jsonMap.put("msg", "安全中心数据获取异常");
		}
		return jsonMap;
	}
	
	/**
	 * 找回登录密码（用户未登录）
	 * 
	 * @return
	 */
	@RequestMapping(value = "/findUserLoginPasswd")
	@ResponseBody
	public Map<String, Object> findUserLoginPasswd() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAppParams();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "非法请求");
				return jsonMap;
			}
			jsonMap=safeCenterService.updateUserPassword(jsonObject,Constants.REACTAPP);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			jsonMap.put("error", "7");
			jsonMap.put("msg", "找回登录密码异常，"+Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 修改用户登录密码
	 * @return
	 */
	@RequestMapping(value = "/changeLoginPassword")
	@ResponseBody
	public String changeLoginPassword() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		String retString = "";
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			User user =userService.queryUserById(userId);
			jsonMap.putAll(safeCenterService.checkChangeLoginPassword(jsonObject, user, Constants.REACTAPP));

			if (jsonMap.get("error").equals("0")) {
				sessionSetAttribute(Constants.SESSION_USER,user);
			}  
			retString = jsonMap.get("error").toString();
			return retString;
		} catch (Exception e) {
			e.printStackTrace(); 
			retString = "8";
			return retString;
		}
	}

	/**
	 * 找回交易密码
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/updateUserdealpwd")
	@ResponseBody
	public Map<String, Object> updateUserdealpwd() { 
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			User user =userService.queryUserById(userId);
			jsonMap.putAll(safeCenterService.checkUserdealpwd(jsonObject, user, Constants.REACTAPP));
			
		} catch (Exception e) {
			e.printStackTrace(); 
			jsonMap.put("error", "8");
			jsonMap.put("msg", "修改交易密码异常，请联系客服！");
		}
		return jsonMap;
	}

	
	
	/**
	 * 查询手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/queryGesturesPassword")
	@ResponseBody
	public Map<String, Object> queryGesturesPassword(){  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId);  
			jsonMap.put("error", "0");
			jsonMap.put("map", ConvertUtil.transBeanToMap(gesturesPassword));
		} catch (NumberFormatException e) { 
			e.printStackTrace();
			jsonMap.put("error", "1");
			jsonMap.put("msg", "请求数据错误，请联系客服:400-606-2079");
		} catch (Exception e) { 
			e.printStackTrace();
			jsonMap.put("error", "2");
			jsonMap.put("msg", "查询手势密码异常，请联系客服:400-606-2079");
		}
		return jsonMap; 

	}
	
	/**
	 * 增加手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/addGesturesPassword")
	@ResponseBody
	public Map<String, Object> addGesturesPassword() {  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			String password =String.valueOf(jsonObject.get("password"));
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId); 

			if(gesturesPassword==null){
				long result = safeCenterService.addGesturesPassword(userId,password);

				if (result <= 0) {
					jsonMap.put("error", "1");
					jsonMap.put("msg", "设置失败，请稍后再试！");
				} else {
					jsonMap.put("error", "0");
					jsonMap.put("msg", "手势密码设置成功！");
				}
			} else {
				jsonMap.put("error", "4");
				jsonMap.put("msg", "手势密码已存在，请勿重复设置");
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			jsonMap.put("error", "5");
			jsonMap.put("msg", "请求数据错误，请联系客服:400-606-2079");
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "6");
			jsonMap.put("msg", "增加手势密码异常，请联系客服:400-606-2079"); 
		}
		return jsonMap;
	}
	
	/**
	 * 更新手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/updateGesturesPassword")
	@ResponseBody
	public Map<String, Object> updateGesturesPassword(){  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			String password =String.valueOf(jsonObject.get("password"));
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId); 

			if(gesturesPassword==null){
				jsonMap.put("error", "4");
				jsonMap.put("msg", "手势密码不存在，无法修改");
				return jsonMap;
			} else {
				if(gesturesPassword.getStatus()==2){
					jsonMap.put("error", "2");
					jsonMap.put("msg", "手势密码关闭状态，不能修改");				
				} else {
					long result = safeCenterService.updateGesturesPassword(userId,password);

					if (result <= 0) {
						jsonMap.put("error", "1");
						jsonMap.put("msg", "设置失败，请稍后再试！");
					} else {
						jsonMap.put("error", "0");
						jsonMap.put("msg", "手势密码设置成功！");
					}
				}
				return jsonMap;
			}
		} catch (Exception e) { 
			e.printStackTrace();
			jsonMap.put("error", "5");
			jsonMap.put("msg", "手势密码设置异常，请联系客服:400-606-2079");
		}
		return jsonMap;

	}
	
	/**
	 * 关闭手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/closeGesturesPassword")
	@ResponseBody
	public Map<String, Object> closeGesturesPassword(){  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId); 
			
			if(gesturesPassword==null){
				jsonMap.put("error", "1");
				jsonMap.put("msg", "手势密码不存在，无法关闭");
				return jsonMap;
			} else {
				if(gesturesPassword.getStatus()==1){
					long result = safeCenterService.removeGesturesPassword(userId);
					
					if (result <= 0) {
						jsonMap.put("error", "2");
						jsonMap.put("msg", "关闭失败，请稍后再试！");
					} else {
						jsonMap.put("error", "0");
						jsonMap.put("msg", "关闭手势密码成功！");
					}
					
				} else {
					jsonMap.put("error", "3");
					jsonMap.put("msg", "请求错误，密码已经是关闭状态！");				
				}
			}
		} catch (Exception e) { 
			e.printStackTrace();
			jsonMap.put("error", "5");
			jsonMap.put("msg", "关闭手势密码异常，请联系客服:400-606-2079");
		}
		return jsonMap;
		
	}
	
	/**
	 * 开启手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/openGesturesPassword")
	@ResponseBody
	public Map<String, Object> openGesturesPassword(){  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId); 
			
			if(gesturesPassword==null){
				jsonMap.put("error", "4");
				jsonMap.put("msg", "手势密码不存在，无法开启");
			} else {
				if(gesturesPassword.getStatus()==2){
					long result = safeCenterService.modifyGesturesPassword(userId);
					
					if (result <= 0) {
						jsonMap.put("error", "1");
						jsonMap.put("msg", "开启失败，请稍后再试！");
					} else {
						jsonMap.put("error", "0");
						jsonMap.put("msg", "手势密码开启成功！");
					}
				} else {
					jsonMap.put("error", "3");
					jsonMap.put("msg", "请求错误，密码已经是开启状态！");					
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "5");
			jsonMap.put("msg", "关闭手势密码异常，请联系客服:400-606-2079");
		}
		return jsonMap;
		
	}
	
	/**
	 * 校验手势密码
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/verifyGesturesPassword")
	@ResponseBody
	public Map<String, Object> verifyGesturesPassword() {  
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = requestAppJSONGetAttribute();	
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));
			String password =String.valueOf(jsonObject.get("password"));
			
			GesturesPassword gesturesPassword = safeCenterService.queryGesturesPassword(userId); 
			
			if(gesturesPassword==null){
				jsonMap.put("error", "5");
				jsonMap.put("msg", "手势密码不存在，无法验证");
				return jsonMap;			
				
			} else {
				int verifyErrorCount = gesturesPassword.getVerifyErrorCount();
				if(gesturesPassword.getStatus()==1){
					//默认状态
					int status = 1;
					int errorCount = 0;
					
					if(password.equalsIgnoreCase(gesturesPassword.getPassword())){
						//复位错误次数为0
						if(verifyErrorCount != 0){
							safeCenterService.updateVerifyErrorCount(userId,errorCount,status);						
						}				
						
						jsonMap.put("error", "0");
						jsonMap.put("msg", "手势密码验证成功！");				
					} else { 
						//设置校验错误次数
						if(verifyErrorCount == 4){	
							//错了第5次，关闭手势密码重新登录
							errorCount = verifyErrorCount + 1;
							safeCenterService.updateVerifyErrorCount(userId,errorCount,3);
							jsonMap.put("error", "2");
							jsonMap.put("msg", "手势密码验证错误"+errorCount+"次"); 
							jsonMap.put("errorCount",errorCount); 					
						} else {
							errorCount = verifyErrorCount + 1;
							long result = safeCenterService.updateVerifyErrorCount(userId,errorCount,status);		
							if (result <= 0) {
								jsonMap.put("error", "3");
								jsonMap.put("msg", "手势密码验证错误"+verifyErrorCount+"次");
								jsonMap.put("errorCount",verifyErrorCount); 		
							} else {
								jsonMap.put("error", "4");
								jsonMap.put("msg", "手势密码验证错误"+errorCount+"次");
								jsonMap.put("errorCount",errorCount); 		
							}	
						}
					}
					
				} else {
					jsonMap.put("error", "6");
					jsonMap.put("msg", "请求出错，手势密码处于关闭状态");
					jsonMap.put("errorCount",verifyErrorCount); 						
				}
				return jsonMap;	
			}
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "7");
			jsonMap.put("msg", "校验手势密码异常，请联系客服:400-606-2079");
		}
		return jsonMap;	
		
	}

	/**
	 * 变更手机号码
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/updateBindingMobile")
	@ResponseBody
	public Map<String, Object> updateBindingMobile(){
		Map<String, Object> jsonMap=new HashMap<String, Object>();
		try { 
			JSONObject jsonObject = requestAppJSONGetAttribute();
			String updateMobile = (String) sessionGetAttribute("updateMobile");
			String updateMobileCodeSession = (String) sessionGetAttribute("updateMobileCode");
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));// 获得用户编号
			
			jsonMap.putAll(safeCenterService.checkBindingMobile(jsonObject,updateMobile,updateMobileCodeSession,userId,Constants.REACTAPP));
			
			if(jsonMap.get("error").equals("0")){
				sessionRemoveAttribute("updateMobileCode");
				sessionRemoveAttribute("updateMobile");
				sessionRemoveAttribute(IConstants.SESSION_USER);
			}
			return jsonMap;
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "7");
			jsonMap.put("msg", "变更手机号码异常，请联系客服！");
			return jsonMap;
		}
	}


	/**
	 * 发送信息给用户绑定邮箱
	 * 
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/sendEmail")
	@ResponseBody
	public Map<String, Object> sendEmailForUserSet(){
		Map<String, Object> jsonMap=new HashMap<String, Object>();
		try { 
			
			JSONObject jsonObject = requestAppJSONGetAttribute();
			if (jsonObject == null) {
				jsonMap.put("mailAddress", "3");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			
			Long userId = Long.parseLong(AppUtil.checkUserId(String.valueOf(jsonObject.get("uid"))));// 获得用户编号
			User user = userService.queryUserById(userId);
			jsonMap.putAll(safeCenterService.checkSendEmailForUserSet(jsonObject,user,getBasePath(),Constants.REACTAPP));
			
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("mailAddress", "2");
			return jsonMap;
		}
		return jsonMap;
	}
	

	@RequestMapping(value = "/bindingEmail")
	@ResponseBody
	public Map<String, Object> bindingEmail(){

		Map<String, Object> jsonMap=new HashMap<String, Object>();
		try { 
			JSONObject jsonObject = requestAppJSONGetAttribute();
			if (jsonObject == null) {
				jsonMap.put("error", "404");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			
			jsonMap.putAll(safeCenterService.checkBindingEmail(jsonObject,Constants.REACTAPP));
			if(jsonMap.get("error").equals("0")){
				sessionSetAttribute("user", jsonMap.get("user"));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return jsonMap;
		}
		return jsonMap;
	}
	
}
