package com.pjzb.controller.common;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lowagie.text.DocumentException;
import com.pjzb.entity.Message;
import com.pjzb.entity.User;
import com.pjzb.service.common.MessageService;
import com.pjzb.service.common.UserInfoService;
import com.pjzb.service.common.UserService;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.shove.Convert;
import com.shove.data.DataException;

/**
 * app、wap、pc端公共Controller 校验手机验证码是否正确、发送短信等等
 * 
 * @author xiaojin
 * 
 */
@Controller
public class CommonController extends BaseController {

	@Autowired
	private UserService userService;

	@Autowired
	private MessageService messageService;


	@Autowired
	private UserInfoService userInfoService;

	@RequestMapping(value = "/front/sendSMS")
	@ResponseBody
	public Map<String, Object> sendSMS() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap = userInfoService.sendSMS(jsonObject, chosese());
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "12");
			jsonMap.put("msg", "发送短信异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;

	}

	/**
	 * app端发送短信
	 * 
	 * @return
	 */
	@RequestMapping(value = "/reactapp/sendSMS")
	@ResponseBody
	public Map<String, Object> appSendSMS() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAppParams();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap = userInfoService.sendSMS(jsonObject, Constants.REACTAPP);
		} catch (Exception e) {
			jsonMap.put("error", "15");
			jsonMap.put("msg", "发送短信异常，" + Constants.CUSTOMER_MSG);
			log.error(e);
			e.printStackTrace();
		}
		return jsonMap;

	}

	/**
	 * wap、pc端公共校验手机验证码是否正确
	 * 
	 * @return
	 */
	@RequestMapping(value = "/checkMobilePhoneCode")
	@ResponseBody
	public Map<String, Object> checkMobilePhoneCode() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap = validateMobilePhoneCode(jsonObject, chosese());
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "3");
			jsonMap.put("msg", "校验验证码异常");
		}
		return jsonMap;
	}

	/**
	 * app端公共校验手机验证码是否正确
	 * 
	 * @return
	 */
	@RequestMapping(value = "/reactapp/checkMobilePhoneCode")
	@ResponseBody
	public Map<String, Object> appCheckMobilePhoneCode() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAppParams();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			jsonMap = validateMobilePhoneCode(jsonObject, Constants.REACTAPP);
		} catch (Exception e) {
			e.printStackTrace();
			jsonMap.put("error", "3");
			jsonMap.put("msg", "校验验证码异常");
		}
		return jsonMap;
	}

	public Map<String, Object> validateMobilePhoneCode(JSONObject jsonObject, String pageType) {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		String code = ConvertUtil.convertObjToStr(jsonObject.get("code")).trim();
		String codeType = ConvertUtil.convertObjToStr(jsonObject.get("type")).trim();
		String codes = (String) sessionGetAttribute(codeType);
		if (codes != null) {
			if (code.equals(codes)) {
				jsonMap.put("error", "0");
				jsonMap.put("msg", "验证成功");
				sessionRemoveAttribute(codeType);
				;
			} else {
				jsonMap.put("error", "1");
				jsonMap.put("msg", "验证码错误");
			}
		} else {
			jsonMap.put("error", "2");
			jsonMap.put("msg", "请获取验证码");
		}
		return jsonMap;
	}

	/**
	 * 判断请求是从PC还是wap端
	 * 
	 * @return
	 */
	@RequestMapping(value = "/indexInit")
	public String indexInit() {
		String pageType = chosese();
		if (pageType.equals(Constants.PC)) {
			return "redirect:/WEB-PC/index.html";
		} else {

			return "redirect:/wap/app.html";
		}
	} 

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/querytips")
	@ResponseBody
	public Map<String, Object> querytips() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "非法请求");
				return jsonMap;
			}
			Integer typeId = Convert.strToInt(jsonObject.getString("TypeId"), Constants.INT_0);
			Message message = messageService.queryMessageByTypeId(typeId);
			jsonMap.putAll(objToJSON(message));
			jsonMap.put("error", "0");
			jsonMap.put("msg", "成功");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			jsonMap.put("error", "1");
			jsonMap.put("msg", "服务协议查看异常，请联系客服！");
		}
		return jsonMap;
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/reactapp/querytipsApp")
	@ResponseBody
	public Map<String, Object> querytipsApp() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAppParams();
			Integer typeId = Convert.strToInt(jsonObject.getString("TypeId"), Constants.INT_0);
			Message message = messageService.queryMessageByTypeId(typeId);
			jsonMap.putAll(objToJSON(message));
			jsonMap.put("error", "0");
			jsonMap.put("msg", "成功");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e);
			jsonMap.put("error", "1");
			jsonMap.put("msg", "服务协议查看异常，" + Constants.CUSTOMER_MSG);
		}
		return jsonMap;
	}

	/**
	 * 验证手机号是否存在
	 * 
	 * @return
	 * @throws IOException
	 * @throws SQLException
	 * @throws DataException
	 * @throws DocumentException
	 */
	@RequestMapping(value = "/isExistPhone")
	@ResponseBody
	public Map<String, Object> isExistPhone() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		try {
			JSONObject jsonObject = getAjaxParam();
			if (jsonObject == null) {
				jsonMap.put("error", "-1");
				jsonMap.put("msg", "请求参数为空");
				return jsonMap;
			}
			String phone = ConvertUtil.convertString(jsonObject.get("cellPhone"));

			if (StringUtils.isBlank(phone)) {
				jsonMap.put("error", "1");
				jsonMap.put("msg", "手机号不能为空");
				return jsonMap;
			}
			// 手机号码验证
			Pattern p = Pattern.compile("^((13[0-9])|(14[7])|(15[0-9])|(18[0-9])|(17[0,5-9]))\\d{8}$");
			Matcher m = p.matcher(phone);
			if (!m.matches()) {
				jsonMap.put("error", "2");
				jsonMap.put("msg", "该手机号码错误！");
				return jsonMap;
			}
			User user = userService.findMobilephone(phone);
			if (user == null) {
				jsonMap.put("error", "3");
				jsonMap.put("msg", "该手机号码在系统中不存在！");
				return jsonMap;
			} else {
				jsonMap.put("error", "0");
				jsonMap.put("msg", "身份验证成功！");
				return jsonMap;
			}

		} catch (Exception e) {
			jsonMap.put("error", "5");
			jsonMap.put("msg", "身份验证异常");
			log.error(e);
			e.printStackTrace();
		}
		return jsonMap;

	}

	/**
	 * 生成验证码
	 * 
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "imageCode")
	public String imageCode(HttpServletResponse response) {
		log.info("============URL=============" + request().getRequestURL());
		log.info("============IP==============" + getRemortIp());
		log.info("============URI=============" + request().getRequestURI());
		try {
			// 在内存中创建图象
			int width = 65, height = 20;
			BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
			// 获取图形上下文
			Graphics g = image.getGraphics();
			// 生成随机类
			Random random = new Random();
			// 设定背景色
			g.setColor(getRandColor(230, 255));
			g.fillRect(0, 0, 120, 40);
			// 设定字体
			g.setFont(new Font("Arial", Font.CENTER_BASELINE | Font.ITALIC, 18));
			// 产生0条干扰线，
			g.drawLine(0, 0, 0, 0);

			// 定义一个包含数字，大小写字母的字符串
			// String strAll =
			// "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			String strAll = "3456789abcdefghjkmnpqrstuvwxy";

			// 取随机产生的认证码(4位数字)
			String sRand = "";
			for (int i = 0; i < 4; i++) {
				// 返回一个小于62的int类型的随机数
				int rd = random.nextInt(29);
				// 随机从指定的位置开始获取一个字符
				String rand = strAll.substring(rd, rd + 1);

				// String rand = String.valueOf(random.nextInt(10));
				sRand += rand;
				// 将认证码显示到图象中
				g.setColor(getRandColor(100, 150));// 调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成
				g.drawString(rand, 15 * i + 6, 16);
			}
			for (int i = 0; i < (random.nextInt(5) + 5); i++) {
				g.setColor(new Color(random.nextInt(255) + 1, random.nextInt(255) + 1, random.nextInt(255) + 1));
				g.drawLine(random.nextInt(100), random.nextInt(30), random.nextInt(100), random.nextInt(30));
			}
			String pageId = StringEscapeUtils.escapeHtml(request().getParameter("pageId"));
			String key = pageId + "_checkCode";
			// 将验证码存入页面KEY值的SESSION里面
			log.info("**************pageId******************" + pageId);
			log.info("**************验证码类型******************" + key);
			log.info("**************验证码******************" + sRand);
			sessionSetAttribute(key, sRand);
			// 图象生效
			g.dispose();
			ServletOutputStream responseOutputStream = response.getOutputStream();
			// 输出图象到页面
			ImageIO.write(image, "JPEG", responseOutputStream);
			// 以下关闭输入流！
			responseOutputStream.flush();
			responseOutputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
			log.error(e);
		}
		// 获得页面key值
		return null;
	}

	/**
	 * 检测验证码是否过期
	 * 
	 * @return
	 * @throws IOException
	 */
	@RequestMapping(value = "/codeIsExpired")
	public String codeIsExpired() {
		String pageId = request().getParameter("pageId");
		String codes = (String) sessionGetAttribute(pageId + "_checkCode");
		if (org.apache.commons.lang.StringUtils.isBlank(codes)) {
			return "1";
		}
		return null;
	}

	/**
	 * 给定范围获得随机颜色
	 * 
	 * @param fc
	 * @param bc
	 * @return
	 */
	Color getRandColor(int fc, int bc) {
		Random random = new Random();
		if (fc > 255)
			fc = 255;
		if (bc > 255)
			bc = 255;
		int r = fc + random.nextInt(bc - fc);
		int g = fc + random.nextInt(bc - fc);
		int b = fc + random.nextInt(bc - fc);
		return new Color(r, g, b);
	}

	@RequestMapping(value = "message")
	public String message() {
		request().setAttribute("title", request().getParameter("title"));
		return null;
	}

	// 校验验证码
	@RequestMapping(value = "/checkPhoneVerCode")
	@ResponseBody
	public Map<String, Object> checkPhoneVerCode() {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		JSONObject jsonObject = getAjaxParam();
		if (jsonObject == null) {
			jsonMap.put("error", "-1");
			jsonMap.put("msg", "请求参数为空");
			return jsonMap;
		}
		String reg_checkCode = (String) sessionGetAttribute("reg_checkCode");
		String code = jsonObject.get("code").toString();
		if (reg_checkCode.equalsIgnoreCase(code)) {
			jsonMap.put("error", "0");
			jsonMap.put("msg", "验证码验证成功");
			session().removeAttribute("reg_checkCode");
			return jsonMap;
		} else {
			jsonMap.put("error", "1");
			jsonMap.put("msg", "验证码错误");
			return jsonMap;
		}
	}

}
