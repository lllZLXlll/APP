package com.pjzb.service.common;

import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pjzb.config.chinapnr.ChinapnrConfig;
import com.pjzb.controller.common.BaseController;
import com.pjzb.controller.common.PageBean;
import com.pjzb.dao.AssignmentDebtDao;
import com.pjzb.dao.AuctionDebtDao;
import com.pjzb.dao.BillCodeDao;
import com.pjzb.dao.BorrowDao;
import com.pjzb.dao.UserDao;
import com.pjzb.entity.BillCode;
import com.pjzb.entity.User;
import com.pjzb.service.chinapnr.ChinapnrInterface;
import com.pjzb.service.chinapnr.ChinapnrService;
import com.pjzb.util.AppUtil;
import com.pjzb.util.Constants;
import com.pjzb.util.ConvertUtil;
import com.pjzb.util.DateUtil;
import com.pjzb.util.IConstants;
import com.shove.Convert;
import com.shove.security.Encrypt;
import com.shove.web.Utility;

/**
 * pc、wap、app端 债权 公共service
 * 
 * @author xiaojin
 *
 */
@Service
public class DebtsService extends BaseController {

	@Autowired
	private AssignmentDebtDao assignmentDebtDao;

	@Autowired
	private UserDao userDao;

	@Autowired
	private BorrowDao borrowDao;

	@Autowired
	private AuctionDebtDao auctionDebtDao;

	@Autowired
	private BillCodeDao billCodeDao;

	public Map<String, Object> queryDebtsAssignmentList(JSONObject jsonObject, String pageType) {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		PageBean pageBean = new PageBean();
		pageBean.setPageNum(Convert.strToLong(jsonObject.getString(Constants.CURPAGE), Constants.LONG_1));
		pageBean.setPageSize(IConstants.PAGE_SIZE_10);
		String borrowTitle = String.valueOf(jsonObject.get("borrowTitle"));
		String t = String.valueOf(jsonObject.get("tt"));
		String y = String.valueOf(jsonObject.get("yy"));
		String x = String.valueOf(jsonObject.get("xx"));
		String flages = String.valueOf(jsonObject.get("flages"));
		String rates = String.valueOf(jsonObject.get("rates"));
		String timeers = String.valueOf(jsonObject.get("timeers"));
		String deadlines = String.valueOf(jsonObject.get("deadlines"));
		String titles = String.valueOf(jsonObject.get("titles"));
		// 声明变量
		String deadlinestart = "";
		String deadlineend = "";
		String borrowWay = "";
		String Ratestart = "";
		String Rateend = "";

		if ("".equals(t) || "0".equals(t)) {
			deadlinestart = "";
			deadlineend = "";

		} else if ("1".equals(t)) {
			deadlinestart = "1";
			deadlineend = "3";
		} else if ("2".equals(t)) {
			deadlinestart = "3";
			deadlineend = "6";
		} else if ("3".equals(t)) {
			deadlinestart = "6";
			deadlineend = "9";
		} else if ("4".equals(t)) {
			deadlinestart = "9";
			deadlineend = "";
		}

		if ("".equals(y) || "0".equals(y)) {
			Ratestart = "";
			Rateend = "";
		} else if ("1".equals(y)) {
			Ratestart = "";
			Rateend = "10";
		} else if ("2".equals(y)) {
			Ratestart = "10";
			Rateend = "15";
		} else if ("3".equals(y)) {
			Ratestart = "15";
			Rateend = "25";
		}

		if ("".equals(x) || "0".equals(x)) {
			borrowWay = "";
		} else if ("1".equals(x)) {
			borrowWay = "1";
		} else if ("2".equals(x)) {
			borrowWay = "2";
		} else if ("3".equals(x)) {
			borrowWay = "3";
		} else if ("4".equals(x)) {
			borrowWay = "4";
		} else {
			// 其余类型
			int borrowWayInt = -1;
			try {
				borrowWayInt = Integer.parseInt(x);
			} catch (Exception ee) {
			}
			if (borrowWayInt != -1) {
				borrowWay = x;
			}
		}
		long totalNum = queryAllDebtTotal(borrowTitle, -1, -1, Ratestart, Rateend, borrowWay, titles, deadlinestart,
				deadlineend, -1, -1, -1, "2,3");
		pageBean.setTotalNum(totalNum);

		List<Map<String, Object>> list = queryAllDebt(borrowTitle, -1, -1, Ratestart, Rateend, null, borrowWay, titles,
				deadlinestart, deadlineend, -1, -1, -1, "2,3", (pageBean.getPageNum() - 1) * Constants.PAGE_SIZE_10,
				Constants.PAGE_SIZE_10);
		pageBean.setPage(list);

		jsonMap.put("pageBean", pageBean);
		jsonMap.put("t", t);
		jsonMap.put("y", y);
		jsonMap.put("x", x);
		jsonMap.put("flages", flages);
		jsonMap.put("rates", rates);
		jsonMap.put("timeers", timeers);
		jsonMap.put("deadlines", deadlines);
		jsonMap.put("titles", titles);
		jsonMap.put("error", "0");
		jsonMap.put("msg", "查询成功");
		return jsonMap;
	}

	public Map<String, Object> queryFindDebtsById(JSONObject jsonObject, String pageType) {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		Map<String, Object> debtsDetailMap = new HashMap<String, Object>();
		long borrowId = 0;
		long id = Long.parseLong(String.valueOf(jsonObject.get("debtId")));
		Map<String, Object> map = getAssignmentDebt(id);
		if (map != null) {
			// 获取转让人信息
			Map<String, String> userinfoMap = userDao.getUserById(Long.parseLong(map.get("alienatorId").toString()));
			if (userinfoMap != null) {
				String mobilePhone = userinfoMap.get("mobilePhone");
				String username = userinfoMap.get("username");
				if (username.equals(mobilePhone)) {
					// 如果用户名就是手机号
					mobilePhone = mobilePhone.replace(mobilePhone.substring(3, 7), "****");
					username = mobilePhone;
				} else {
					mobilePhone = mobilePhone.replace(mobilePhone.substring(3, 7), "****");
					username = username.replace(username.substring(1, 3), "**");
				}

				debtsDetailMap.put("username", username);
				debtsDetailMap.put("mobilePhone", mobilePhone);
			}
			long viewCount = Convert.strToLong(map.get("viewCount").toString(), 0);
			viewCount++;
			debtsDetailMap.putAll(map);
			borrowId = Convert.strToLong(map.get("borrowId").toString(), -1);

			// 查询投资人可用余额
			long userId = -1l;
			if (pageType != null && Constants.REACTAPP.equals(pageType)) {
				String userIdStr = String.valueOf(jsonObject.get("uid")).trim();
				if (userIdStr != null && userIdStr.trim().length() > 0) {
					try {
						userIdStr = AppUtil.checkUserId(String.valueOf(jsonObject.get("uid")).trim());
					} catch (Exception e) {
						e.printStackTrace();
					}
					if (userIdStr.equals("-8")) {
						jsonMap.put("error", "-2");
						jsonMap.put("msg", "您的身份验证失败");
						return jsonMap;
					}
					userId = Long.parseLong(userIdStr);
				}
			} else {
				User user = (User) sessionGetAttribute(Constants.SESSION_USER);
				if (user != null)
					userId = user.getId();
				else 
					userId = -1;
			}
			if (-1 != userId) {
				Map<String, Object> userMap = userDao.queryUserAmount(userId);
				jsonMap.put("usableSum", userMap.get("usableSum"));
			} else {
				jsonMap.put("usableSum", "-1");
			}

			// 获取债权购买人信息
			Map<String, Object> debtUserMap = null;
			if (null != map.get("auctionerId") && !map.get("auctionerId").equals("")) {
				debtUserMap = userDao.getUserAddressById(Long.parseLong(map.get("auctionerId").toString()));
			}

			long borrowerId = borrowDao.queryBorrowerByBorrowId(borrowId);
			Map<String, Object> mapth = borrowDao.queryBorrowerImgpath(borrowId);
			String imgPath = mapth.get("imgPath").toString();
			debtsDetailMap.put("imgPath", imgPath + "");
			debtsDetailMap.put("borrowerId", borrowerId + "");
			debtsDetailMap.put("viewCount", viewCount + "");
			String deptStatus = map.get("debtStatus").toString();
			updateAssignmentDebt(id, deptStatus, viewCount);
			String publishTime = debtsDetailMap.get("publishTime").toString();
			long auctionDays = Convert.strToLong(debtsDetailMap.get("auctionDays").toString(), 0);
			if (StringUtils.isNotBlank(publishTime)) {
				long remainDays = DateUtil.dateAddDay(DateUtil.strToDate(publishTime), (int) auctionDays).getTime();
				debtsDetailMap.put("remainDays", remainDays + "");
				debtsDetailMap.put("curTime", new Date().getTime() + "");
			}
			long debtId = Convert.strToLong(debtsDetailMap.get("id").toString(), -1);
			debtsDetailMap.put("debtId", debtsDetailMap.get("id"));
			debtsDetailMap.putAll(queryAuctionMaxPrice(debtId));
			long alienatorId = Convert.strToLong(debtsDetailMap.get("alienatorId").toString(), -1);
			Map<String, Object> userMap = userDao.getUserAddressById(alienatorId);

			// 借款详细
			Map<String, Object> borrowDetailMap = null;
			try {
				borrowDetailMap = borrowDao.queryBorrowDetailById(borrowId);

			} catch (Exception e) {
				e.printStackTrace();
			}

			jsonMap.put("userInfo", userMap);// 转让人信息
			jsonMap.put("debtsDetail", debtsDetailMap);
			jsonMap.put("debtUserMap", debtUserMap);// 认购人信息
			jsonMap.put("borrowDetailMap", borrowDetailMap);// 借款信息
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
			return jsonMap;
		}
		return jsonMap;
	}

	private Map<String, Object> queryAuctionMaxPrice(long debtId) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> auctionMap = auctionDebtDao.queryAuctionMaxPrice(debtId);
		if (auctionMap != null) {
			map.put("id", auctionMap.get("id"));
			map.put("userId", auctionMap.get("userId"));
			map.put("maxAuctionPrice", auctionMap.get("auctionPrice"));
		}
		long auctionCount = auctionDebtDao.queryAuctionDebtCountByDebtId(debtId);
		map.put("auctionCount", auctionCount);
		return map;
	}
	
	public Map<String, Object> queryBuyAuctingDebt(JSONObject jsonObject, String pageType) {
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		long debtId = Convert.strToLong(String.valueOf(jsonObject.get("debtId")), -1);
		long userId = -1;
		if (pageType != null && Constants.REACTAPP.equals(pageType)) {
			String userIdStr = String.valueOf(jsonObject.get("uid")).trim();
			if (userIdStr != null && userIdStr.trim().length() > 0) {
				try {
					userIdStr = AppUtil.checkUserId(String.valueOf(jsonObject.get("uid")).trim());
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (userIdStr.equals("-8")) {
					jsonMap.put("error", "-2");
					jsonMap.put("msg", "您的身份验证失败");
					return jsonMap;
				}
				userId = Long.parseLong(userIdStr);
			}
		} else {
			User user = (User) sessionGetAttribute(Constants.SESSION_USER);
			userId = user.getId();
		}

		String pwd = ConvertUtil.FilteSqlInfusion(String.valueOf(jsonObject.get("pwd")));
		if ("1".equals(IConstants.ENABLED_PASS)) { // 1为默认启用
			pwd = Encrypt.MD5(pwd.trim());
		} else {
			pwd = Encrypt.MD5(pwd.trim() + IConstants.PASS_KEY);
		}
		double auctionPrice = Convert
				.strToDouble(ConvertUtil.FilteSqlInfusion(String.valueOf(jsonObject.get("auctionPrice"))), 0.0);
		Map<String, Object> debtMap = getAssignmentDebt(debtId);
		Map<String, Object> userMap = userDao.getUserInfoById(userId);

		if (debtMap != null && userMap != null) {
			if (debtMap.get("alienatorId").equals(userId + "")) {
				jsonMap.put("error", "1");
				jsonMap.put("msg", "不能投自己转让的债权");
				return jsonMap;
			}
			long borrowId = Convert.strToLong(debtMap.get("borrowId").toString(), -1);

			Map<String, Object> aucctionMap = auctionDebtDao.getAuctionDebt(debtId, userId);
			double oldAuctionPrice = 0.0;
			if (aucctionMap != null) {
				oldAuctionPrice = Convert.strToDouble(aucctionMap.get("auctionPrice").toString(), 0.0);
			}

			double usableSum = Convert.strToDouble(userMap.get("usableSum").toString(), 0.0);
			if (usableSum < (auctionPrice - oldAuctionPrice)) {
				// JSONUtils.printStr("-4"); // 可用余额不足

				jsonMap.put("error", "2");
				jsonMap.put("msg", "可用余额不足");
				return jsonMap;
			}

			long borrowerId = borrowDao.queryBorrowerByBorrowId(borrowId);
			if (borrowerId == userId) {
				// JSONUtils.printStr("-9"); // 借款者不能竞拍该债权
				jsonMap.put("error", "3");
				jsonMap.put("msg", "借款者不能竞拍该债权");
				return jsonMap;
			}
			if (!"2".equals(debtMap.get("debtStatus").toString())) {
				// JSONUtils.printStr("-7"); //竞拍失败
				jsonMap.put("error", "4");
				jsonMap.put("msg", "购买失败,非转让中的债权");
				return jsonMap;
			}
			String transAmt = Convert.strToStr(ConvertUtil.FilteSqlInfusion(jsonObject.get("auctionPrice").toString()),
					"0.00");

			StringBuffer sb = new StringBuffer();
			if (transAmt != null && transAmt.indexOf(".") == -1) {
				transAmt = sb.append(transAmt).append(".00").toString();
			} else {
				transAmt = transAmt.substring(0, transAmt.indexOf(".") + 3);
			}

			User userInfo = userDao.queryUserById(userId);
			long buyUsrCustId = Convert.strToLong(userInfo.getIpayAccount(), -1);

			String param = "";

			BillCode billCode = new BillCode();
			billCode.setPmerBillNo(debtId + "");
			billCode.setParamMap(param);
			billCodeDao.addBillCode(billCode);
			String html = findSendDebtHtml(debtId, auctionPrice, buyUsrCustId, userId, borrowId, this.getBasePath(),
					pageType);
			jsonMap.put("html", html);
			jsonMap.put("error", "0");
			jsonMap.put("msg", "查询成功");
			return jsonMap;
		}
		return jsonMap;
	}

	public String findSendDebtHtml(long debtId, double aucionPrice, long BuyCustId, long userId, long borrowId,
			String basepath, String pageType) {
		Map<String, Object> mm = assignmentDebtDao.queryAssignmentDebt(debtId);

		JSONObject BidDetail = new JSONObject();
		BidDetail.put("BidOrdId", mm.get("BidOrdId"));// 投标订单号
		BidDetail.put("BidOrdDate", mm.get("BidOrdDate").toString().replaceAll("-", "").substring(0, 8));// 投标日期
		BidDetail.put("BidCreditAmt", mm.get("BidCreditAmt").toString());// 投标金额

		long investId = Convert.strToLong(mm.get("investId").toString(), -1);

		List<Map<String, Object>> debtList = assignmentDebtDao.queryAssignmentDebtListByInvestId(investId);

		if (debtList.size() > 0) {
			long auctionerId = (Long) debtList.get(0).get("auctionerId");
			User userInfoMap = userDao.queryUserById(auctionerId);
			mm.put("SellCustId", userInfoMap.getIpayAccount());
			BidDetail.put("BidOrdId", debtList.get(0).get("ordId") + "");
			String date = debtList.get(0).get("buyTime").toString().replaceAll("-", "").substring(0, 8) + "";
			BidDetail.put("BidOrdDate", date);
		}

		// 拼接 BorrowerDetails
		JSONArray BorrowerDetails = new JSONArray();
		JSONObject json = new JSONObject();
		json.put("BorrowerCustId", mm.get("ipayAccount"));// 借款发布者客户号
		json.put("BorrowerCreditAmt", mm.get("BidCreditAmt").toString());
		json.put("PrinAmt", new DecimalFormat("0.00").format(new Double(mm.get("hasPrincipal").toString())));// 已还本金
		BorrowerDetails.add(json);
		BidDetail.put("BorrowerDetails", BorrowerDetails.toString());// 借款人信息

		JSONArray BidDetails = new JSONArray();
		BidDetails.add(BidDetail);

		json = new JSONObject();
		json.put("BidDetails", BidDetails.toString());

		Map<String, Object> debtMap = assignmentDebtDao.getAssignmentDebt(debtId);
		double debtSum = Convert.strToDouble(debtMap.get("debtSum").toString(), 0.0);
		// 查询借款信息得到借款时插入的平台收费标准
		// BorrowDebtVo maps = borrowDao.queryBorrowInfo(borrowId);
		// 得到收费标准的说明信息
		int debtLimit = Convert.strToInt(debtMap.get("debtLimit").toString(), 1);
		double manageFee = 0.00;
		if (debtLimit <= 6) {
			manageFee = debtSum * 0.006;
		} else if (debtLimit > 6 && debtLimit <= 12) {
			manageFee = debtSum * 0.008;
		} else if (debtLimit > 12) {
			manageFee = debtSum * 0.01;
		}
		String fee = new DecimalFormat("0.00").format(manageFee);

		String divAcctId = ChinapnrConfig.CHINAPNR_SYQCJR;
		JSONArray DivDetails = new JSONArray();
		JSONObject DivDetail = new JSONObject();
		DivDetail.put("DivAcctId", divAcctId);
		DivDetail.put("DivAmt", fee);
		DivDetails.add(DivDetail);
		String OrdId = DateUtil.generateSequenceNo();
		String retUrl = basepath + "WEB-PC/reCreditAssign.do";
		String bgRetUrl = basepath + "reAsyncCreditAssign.do";
		String MerPriv = debtId + "-" + userId;
		
		if (pageType != null && pageType.equals(Constants.REACTAPP))
			MerPriv += "-" + pageType;
		
		if (fee.equalsIgnoreCase("0.00")) {
			return ChinapnrInterface.creditAssignTwo(OrdId, mm.get("SellCustId").toString(),
					mm.get("BidCreditAmt").toString(), new DecimalFormat("0.00").format(aucionPrice), json.toString(),
					fee, BuyCustId + "", DateUtil.dateToYMD(new Date()), MerPriv, retUrl, bgRetUrl, pageType);

		} else {
			return ChinapnrInterface.creditAssign(OrdId, mm.get("SellCustId").toString(),
					mm.get("BidCreditAmt").toString(), new DecimalFormat("0.00").format(aucionPrice), json.toString(),
					fee, DivDetails.toString(), BuyCustId + "", DateUtil.dateToYMD(new Date()), MerPriv, retUrl,
					bgRetUrl, pageType);
		}
	}

	/**
	 * 查询前台的全部债权
	 */
	public List<Map<String, Object>> queryAllDebt(String borrowTitle, long debtSum, long auctionBasePrice,
			String ratestart, String rateend, String flages, String borrowWay, String titles, String deadlinestart,
			String deadlineend, long auctionMode, long isLate, long publishDays, String debtStatus, long begin,
			long end) {
		borrowTitle = Utility.filteSqlInfusion(titles);
		debtStatus = Utility.filteSqlInfusion(debtStatus);
		borrowWay = Utility.filteSqlInfusion(borrowWay);
		ratestart = Utility.filteSqlInfusion(ratestart);
		rateend = Utility.filteSqlInfusion(rateend);
		flages = Utility.filteSqlInfusion(flages);
		deadlinestart = Utility.filteSqlInfusion(deadlinestart);
		deadlineend = Utility.filteSqlInfusion(deadlineend);

		String[] idArray = {};
		if (StringUtils.isNotBlank(debtStatus)) {
			String idStr = StringEscapeUtils.escapeSql("'" + debtStatus + "'");
			idStr = idStr.replaceAll("'", "");
			idArray = idStr.split(",");
		}

		return assignmentDebtDao.queryAllDebt(debtStatus, idArray, borrowTitle, deadlinestart, deadlineend, rateend,
				ratestart, borrowWay, debtSum, auctionBasePrice, auctionMode, isLate, publishDays, flages, begin, end);
	}

	/**
	 * 查询前台的全部债权Total
	 */
	public long queryAllDebtTotal(String borrowTitle, long debtSum, long auctionBasePrice, String ratestart,
			String rateend, String borrowWay, String titles, String deadlinestart, String deadlineend, long auctionMode,
			long isLate, long publishDays, String debtStatus) {
		borrowTitle = Utility.filteSqlInfusion(titles);
		debtStatus = Utility.filteSqlInfusion(debtStatus);
		borrowWay = Utility.filteSqlInfusion(borrowWay);
		ratestart = Utility.filteSqlInfusion(ratestart);
		rateend = Utility.filteSqlInfusion(rateend);
		deadlinestart = Utility.filteSqlInfusion(deadlinestart);
		deadlineend = Utility.filteSqlInfusion(deadlineend);

		String[] idArray = {};
		if (StringUtils.isNotBlank(debtStatus)) {
			String idStr = StringEscapeUtils.escapeSql("'" + debtStatus + "'");
			idStr = idStr.replaceAll("'", "");
			idArray = idStr.split(",");
		}

		return assignmentDebtDao.queryAllDebtTotal(debtStatus, idArray, borrowTitle, deadlinestart, deadlineend,
				rateend, ratestart, borrowWay, debtSum, auctionBasePrice, auctionMode, isLate, publishDays);
	}

	/**
	 * 根据ID获取债权转让信息
	 */
	public Map<String, Object> getAssignmentDebt(long id) {
		return assignmentDebtDao.getAssignmentDebt(id);
	}

	public long updateAssignmentDebt(long id, String debtStatus, long viewCount) {
		String idStr = Utility.filteSqlInfusion(debtStatus);
		idStr = StringEscapeUtils.escapeSql("'" + debtStatus + "'");
		idStr = idStr.replaceAll("'", "");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("viewCount", viewCount);
		map.put("id", id);
		map.put("array", idStr.split(","));
		return assignmentDebtDao.updateAssignmentDebt(map);
	}

}
