package com.pjzb.service.admin.borrow;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pjzb.config.chinapnr.ChinapnrConfig;
import com.pjzb.config.fadada.FddClient;
import com.pjzb.controller.common.BaseController;
import com.pjzb.dao.BorrowDao;
import com.pjzb.dao.EnterpriseDao;
import com.pjzb.dao.FaDaDaDao;
import com.pjzb.dao.InvestDao;
import com.pjzb.dao.InvestRepaymentDao;
import com.pjzb.dao.RepaymentDao;
import com.pjzb.dao.UserDao;
import com.pjzb.entity.Borrow;
import com.pjzb.entity.Enterprise;
import com.pjzb.entity.FaDaDa;
import com.pjzb.entity.Invest;
import com.pjzb.entity.User;
import com.pjzb.service.common.UserService;
import com.pjzb.util.FreemarkerUtil;
import com.pjzb.util.GenerateSequenceNo;
import com.pjzb.util.IConstants;
import com.pjzb.util.JspToHtml;
import com.shove.Convert;

import net.sf.json.JSONObject;

/**
 * 手工补签合同
 * 
 * @author zlx
 *
 */

@Service
public class AdminManSuppContractService extends BaseController {

	@Autowired
	private InvestDao investDao;

	@Autowired
	private UserDao userDao;

	@Autowired
	private BorrowDao borrowDao;

	@Autowired
	private RepaymentDao repaymentDao;

	@Autowired
	private EnterpriseDao enterpriseDao;

	@Autowired
	private InvestRepaymentDao investRepaymentDao;

	@Autowired
	private FaDaDaDao faDaDaDao;

	@Autowired
	private UserService userService;

	/**
	 * 手工补签合同
	 * 
	 * @throws Exception,
	 *             RuntimeException
	 */
	public Map<String, Object> handSignHeTonglist(long id) throws Exception, RuntimeException {
		List<Map<String, Object>> investList = investDao.queryInvestByBorrowId(id);

		if (investList == null || investList.size() == 0) {
			return ajaxDoneInfo("300", "该借款ID不存在", "", "");
		}

		Map<String, Object> borrowUserMap = new HashMap<String, Object>();
		List<Map<String, Object>> investorList = new ArrayList<Map<String, Object>>();

		int successNum = 0;// 成功的个数
		// 进行标的的法大大签章
		for (int i = 0, size = investList.size(); i < size; i++) {
			Map<String, Object> investMap = investList.get(i);
			// 文档传输到法大大
			String doc_url = "";// 文档地址
			String doc_typeD = "";// 文档类型
			String contrac_id = GenerateSequenceNo.generateSequenceNo();
			String filePath = getBasePath() + "WEB-INF/page/front/personcenter/template.html";
			String filePathHj = getBasePath() + "WEB-INF/page/front/personcenter/template_hj.html";
			String savepath = getBasePath() + "WEB-INF/page/front/personcenter/abc.html";
			// 先生成html数据界面
			// 取出标的数据 查询t_borrow表
			Borrow bidMap = borrowDao.queryBorrowById(id);
			// 营业执照号
			Enterprise businessMap = enterpriseDao.queryEnterpriseByUserId(bidMap.getPublisher());
			String businessCode = businessMap.getBusinessCode();
			// 查询投资人信息用户信息
			User userMap = userDao.queryUserById(Convert.strToLong(investMap.get("investor") + "", 1));

			// 查询借款人信息
			User rerMap = userDao.queryUserById(bidMap.getPublisher());

			// 查询t_repayment表
			Map<String, Object> repayMap = repaymentDao.queryrRepay(id);
			Invest investsMap = investDao.queryrInvests(id, Convert.strToLong(investMap.get("investId") + "", 1));

			// 查询t_invest_repayment表 投资还款表
			List<Map<String, Object>> investRepayListMap = new ArrayList<Map<String, Object>>();
			investRepayListMap = investRepaymentDao.queryrInvestRepay(id, investMap.get("investor") + "",
					investMap.get("investId") + "");

			// 通过模板生成HTML文件
			/*
			 * 1、出借人 2、借款人 3、投资金额借款金额 4、借款详细信息 5、代还本金stillPrincipal
			 * 6、还款方式paymentMode 7、借款开始auditTime 8、借款截止时间repayDate 9、借款金额
			 * 10、借款期数 11、每期应收本息 12、甲方真实姓名 13、乙方真实姓名 14、身份证（借款人）
			 */
			// 甲方penson表
			Map<String, String> personJaMap = userDao
					.queryPersonById(Convert.strToLong(investMap.get("investor") + "", 1));
			String jName = personJaMap.get("realName");
			String yFangIdNo = personJaMap.get("idNo");
			// 乙方person表
			Map<String, String> personYeMap = userDao.queryPersonById(bidMap.getPublisher());
			String yName = personYeMap.get("realName");
			String idNo = personYeMap.get("idNo");
			String Mode = null;
			String payment = bidMap.getPaymentMode() + "";
			int paymentModet = Convert.strToInt(payment, 1);
			if (paymentModet == 1) {
				Mode = "等额本息还款";
			} else if (paymentModet == 2) {
				Mode = "先息后本还款";
			} else if (paymentModet == 4) {
				Mode = "一次性还款";
			}

			String contract_id = investMap.get("contract_id") + "";

			// 如果投资人和投资人代表已经签署合同，则只需要借款人和居间方签署合同。
			if (contract_id == null || contract_id.trim().equals("null") || contract_id.trim().length() == 0) {

				/*
				 * @ahor tangjielong 1、甲方转让人 发标人 2、甲方营业执照 发标人 3、应收账款受让人 乙方姓名
				 * 4、乙方普金资本账户名 5、乙方身份证 6、合同编号 提前一天才知道 7、投资金额 8、投资时间期限 9、利率
				 */

				String behalfName = "";// 投资人代表真实姓名
				@SuppressWarnings("unused")
				String behalfNo = "";// 投资人代表身份证

				/**
				 * client_type 客户类型：1-个人，2-企业 client_role 客户角色: 1
				 * 接入平台，2.担保公司，3.投资人， 4.借款人
				 */
				String client_type = "1";
				String client_role = "4";
				if (rerMap.getBusiCode() != null && !rerMap.getBusiCode().equals("")) {
					client_type = "2";
					// 如果是企业用户借款，签名使用username
					yName = rerMap.getUsername();
				}

				String transAmt = investMap.get("TransAmt") + "";// 投资金额
				String borrowAmount = bidMap.getBorrowAmount() + "";// 项目总额
				double transAmtD = Double.parseDouble(transAmt);
				double borrowAmountD = Double.parseDouble(borrowAmount);
				double amountProportion = transAmtD / borrowAmountD * 100;// 投资金额占总金额的比例

				// 判断是不是多金宝还是其他的，多金宝的borrowTypeSubId是3,多金宝用template.html的合同模板.
				// 新手标是5,新手标可以选择合同模板，如果hetong的值为109则用
				// template.html,否则用template_hj.html模板
				if (bidMap.getBorrowTypeSubId().equals("3")
						|| (bidMap.getBorrowTypeSubId().equals("5") && bidMap.getHetong().equals("109"))) {
					// 投资人代表person表
					Map<String, String> behalfOfInvestorMap = userDao.queryPersonById(bidMap.getBehalfUserId());
					behalfName = behalfOfInvestorMap.get("realName");
					behalfNo = behalfOfInvestorMap.get("idNo");

					JspToHtml.JspToHtmlFile(filePath, savepath, rerMap.getUsername(), userMap.getUsername(),
							investMap.get("TransAmt") + "", bidMap.getDetail(), investsMap.getRecivedPrincipal() + "",
							investsMap.getRecievedInterest() + "", Mode, bidMap.getAuditTime() + "",
							repayMap.get("repayDate") + "", investsMap.getInvestAmount() + "",
							investsMap.getDeadline() + "", investRepayListMap, bidMap.getAuditTime() + "", jName, yName,
							idNo, contrac_id, behalfName);// 生成pdf文件
				} else {
					JspToHtml.JspToHtmlAndHengda(filePathHj, savepath, yName, businessCode, jName,
							userMap.getUsername(), yFangIdNo, bidMap.getContractId(), investMap.get("TransAmt") + "",
							amountProportion + "", bidMap.getAuditTime() + "", repayMap.get("repayDate") + "",
							bidMap.getAnnualRate() + "");
				}
				// 生成pdf文件
				// 这个是生成PDF方法二
				String pdf = getBasePath() + "WEB-INF/page/front/personcenter/pd4ml.pdf";
				String fontUrl = IConstants.FONTURL;

				FreemarkerUtil.htmlToPdf(savepath, pdf, fontUrl);

				File file = new File(pdf);
				String doc_type = ".pdf";

				// 调用请求
				String response = FddClient.invokeUploadDocs(contrac_id, file, "", doc_type);

				System.out.println(response);
				log.info("法大大请求文件上传");
				log.info(net.sf.json.util.JSONUtils.valueToString(response) + "====>");
				JSONObject jobj1 = JSONObject.fromObject(response);
				// 查询投资人的法大大CA证书
				FaDaDa uMap = faDaDaDao.queryFadadaByUserId(Convert.strToLong(investMap.get("investor") + "", 1));
				// 查询借款人的法大大CA证书
				FaDaDa jkuanMap = faDaDaDao.queryFadadaByUserId(bidMap.getPublisher());

				// 查询平台居间方的法大大CA证书
				FaDaDa middleMap = faDaDaDao.queryFadadaByUserId(Long.parseLong(ChinapnrConfig.FADADA_MIDDLE_CUSTOMER));

				String customer_id = uMap.getCustomerId();
				String doc_title = bidMap.getBorrowTitle();// 待签署文档标题

				// String batch_id= "";//借款人才需要传
				String contract_send = GenerateSequenceNo.generateSequenceNo();
				String behalf_send = GenerateSequenceNo.generateSequenceNo();
				String sontract_send = GenerateSequenceNo.generateSequenceNo();
				String middle_send = GenerateSequenceNo.generateSequenceNo();

				String contract_id_two = bidMap.getContractId();

				if (jobj1.getInt("code") == 1000) { // 上传文件成功
					if (bidMap.getBorrowTypeSubId().equals("3")
							|| (bidMap.getBorrowTypeSubId().equals("5") && bidMap.getHetong().equals("109"))) {

						String sign_keyword = "出借人方";// 自动签署关键字
						FaDaDa fdd = new FaDaDa();
						fdd.setUid(Convert.strToLong(investMap.get("investor") + "", -1));
						fdd.setContractId(contrac_id);
						fdd.setDocType(doc_type);
						fdd.setFile(pdf);
						fdd.setContractIdEnd(contract_id_two);
						faDaDaDao.updateFadada(fdd);

						// 借款的合同，每次投资人签署这个合同
						String borrowVocher = FddClient.invokeExtSignAutoTwo(contract_send, customer_id, doc_url, "1",
								"3", contrac_id, doc_title, sign_keyword, "", doc_typeD);
						JSONObject jb = JSONObject.fromObject(borrowVocher);
						log.info("投资人自动文档签署完成");

						// 投资人签署完，投资人代表签署这个合同
						if (jb.getInt("code") == 1000) {

							// 查询投资人代表的法大大CA证书
							FaDaDa behalfMap = faDaDaDao.queryFadadaByUserId(bidMap.getBehalfUserId());
							String behalfRealName = behalfName;// 自动签署关键字
							String behalfResult = FddClient.invokeExtSignAutoTwo(behalf_send, behalfMap.getCustomerId(),
									doc_url, "1", "3", contrac_id, doc_title, behalfRealName, "", doc_typeD);
							JSONObject behalfJB = JSONObject.fromObject(behalfResult);
							log.info("投资人代表自动文档签署完成");

							// 投资人代表签署完，借款人再去签署这个合同
							if (behalfJB.getInt("code") == 1000) {
								// 签署关键字
								String sign_key = "借款人方";
								String borrowQians = FddClient.invokeExtSignAuto(sontract_send,
										jkuanMap.getCustomerId(), doc_url, rerMap.getTransactionId(), client_type,
										client_role, contrac_id, doc_title, sign_key, "", doc_typeD);
								JSONObject jobt = JSONObject.fromObject(borrowQians);
								log.info("借款人自动文档签署完成");
								log.info(net.sf.json.util.JSONUtils.valueToString(jobt) + "====>");

								if (jobt.getInt("code") == 1000) {

									// 签署关键字
									String midd_sign_key = "居间方";
									String middSign = FddClient.invokeExtSignAutoTwo(middle_send,
											middleMap.getCustomerId(), doc_url, "2", "1", contrac_id, doc_title,
											midd_sign_key, "", doc_typeD);
									JSONObject jobmiddle = JSONObject.fromObject(middSign);

									log.info("居间方自动文档签署完成");
									log.info(net.sf.json.util.JSONUtils.valueToString(jobmiddle) + "====>");

									// 签署后文件下载地址
									String download_url = jb.getString("download_url");

									// 在线查看已签署地址
									String viewpdf_url = jb.getString("viewpdf_url");
									investDao.updateInvestFadadaInfo(contrac_id, download_url, viewpdf_url,
											investMap.get("trxId") + "",
											Convert.strToLong(investMap.get("investor") + "", 1));

									// 法大大合同归档
									Invest fadaMap = investDao
											.queryInvestById(Convert.strToLong(investMap.get("investId") + "", 1));
									String responsed = FddClient.invokeContractFilling(fadaMap.getContractId());

									JSONObject jbContract = JSONObject.fromObject(responsed);
									log.info("法大大合同归档 ====>" + net.sf.json.util.JSONUtils.valueToString(jbContract));
									if (jbContract.getInt("code") == 1000) {
										successNum = successNum + 1;
									}
								}
							}

						}

					} else {
						String sign_keyword = "应收账款受让人";// 自动签署关键字
						FaDaDa fdd = new FaDaDa();
						fdd.setUid(Convert.strToLong(investMap.get("investor") + "", -1));
						fdd.setContractId(contrac_id);
						fdd.setDocType(doc_type);
						fdd.setFile(pdf);
						fdd.setContractIdEnd(contract_id_two);
						faDaDaDao.updateFadada(fdd);

						// 借款的合同，每次投资再签署个人的
						String borrowVocher = FddClient.invokeExtSignAutoTwo(contract_send, customer_id, doc_url, "1",
								"3", contrac_id, doc_title, sign_keyword, "", doc_typeD);
						JSONObject jb = JSONObject.fromObject(borrowVocher);
						// 签署关键字
						String sign_key = "应收账款转让人";
						// 投资人签署完，借款人再去签署一下这个合同
						if (jb.getInt("code") == 1000) {

							String borrowQians = FddClient.invokeExtSignAuto(sontract_send, jkuanMap.getCustomerId(),
									doc_url, rerMap.getTransactionId(), client_type, client_role, contrac_id, doc_title,
									sign_key, "", doc_typeD);
							JSONObject jobt = JSONObject.fromObject(borrowQians);
							log.info("法大大自动文档签署");
							log.info(net.sf.json.util.JSONUtils.valueToString(jobt) + "====>");

							if (jobt.getInt("code") == 1000) {

								// 签署关键字
								String midd_sign_key = "普金资本运营";

								String middSign = FddClient.invokeExtSignAutoTwo(middle_send, middleMap.getCustomerId(),
										doc_url, "2", "1", contrac_id, doc_title, midd_sign_key, "", doc_typeD);
								JSONObject jobmiddle = JSONObject.fromObject(middSign);

								log.info("居间方自动文档签署完成");
								log.info(net.sf.json.util.JSONUtils.valueToString(jobmiddle) + "====>");

								// 签署后文件下载地址
								String download_url = jb.getString("download_url");

								// 在线查看已签署地址
								String viewpdf_url = jb.getString("viewpdf_url");
								investDao.updateInvestFadadaInfo(contrac_id, download_url, viewpdf_url,
										investMap.get("trxId") + "",
										Convert.strToLong(investMap.get("investor") + "", 1));

								// 法大大合同归档
								Invest fadaMap = investDao
										.queryInvestById(Convert.strToLong(investMap.get("investId") + "", 1));
								String responsed = FddClient.invokeContractFilling(fadaMap.getContractId());

								JSONObject jbContract = JSONObject.fromObject(responsed);
								log.info("法大大合同归档 ====>" + net.sf.json.util.JSONUtils.valueToString(jbContract));
								if (jbContract.getInt("code") == 1000) {
									successNum = successNum + 1;
								}
							}

						}
					}
				}
			} else {

				contrac_id = contract_id;

				// 查询借款人的法大大CA证书
				FaDaDa jkuanMap = faDaDaDao.queryFadadaByUserId(bidMap.getPublisher());

				// 查询平台居间方的法大大CA证书
				FaDaDa middleMap = faDaDaDao.queryFadadaByUserId(Long.parseLong(ChinapnrConfig.FADADA_MIDDLE_CUSTOMER));

				String doc_title = bidMap.getBorrowTitle();// 待签署文档标题

				String sontract_send = GenerateSequenceNo.generateSequenceNo();
				String middle_send = GenerateSequenceNo.generateSequenceNo();
				/**
				 * client_type 客户类型：1-个人，2-企业 client_role 客户角色: 1
				 * 接入平台，2.担保公司，3.投资人， 4.借款人
				 */
				String client_type = "1";
				String client_role = "4";
				if (rerMap.getBusiCode() != null && !rerMap.getBusiCode().equals("")) {
					client_type = "2";
				}

				if (bidMap.getBorrowTypeSubId().equals("3")
						|| (bidMap.getBorrowTypeSubId().equals("5") && bidMap.getHetong().equals("109"))) {

					// 签署关键字
					String sign_key = "借款人方";
					String borrowQians = FddClient.invokeExtSignAuto(sontract_send, jkuanMap.getCustomerId(), doc_url,
							rerMap.getTransactionId(), client_type, client_role, contrac_id, doc_title, sign_key, "",
							doc_typeD);
					JSONObject jobt = JSONObject.fromObject(borrowQians);
					log.info("借款人自动文档签署完成");
					log.info(net.sf.json.util.JSONUtils.valueToString(jobt) + "====>");

					if (jobt.getInt("code") == 1000) {

						// 签署关键字
						String midd_sign_key = "居间方";
						String middSign = FddClient.invokeExtSignAutoTwo(middle_send, middleMap.getCustomerId(),
								doc_url, "2", "1", contrac_id, doc_title, midd_sign_key, "", doc_typeD);
						JSONObject jobmiddle = JSONObject.fromObject(middSign);

						log.info("居间方自动文档签署完成");
						log.info(net.sf.json.util.JSONUtils.valueToString(jobmiddle) + "====>");
						// 签署后文件下载地址
						String download_url = jobmiddle.getString("download_url");

						// 在线查看已签署地址
						String viewpdf_url = jobmiddle.getString("viewpdf_url");
						investDao.updateInvestFadadaInfo(contrac_id, download_url, viewpdf_url,
								investMap.get("trxId") + "", Convert.strToLong(investMap.get("investor") + "", 1));

						// 法大大合同归档
						Invest fadaMap = investDao
								.queryInvestById(Convert.strToLong(investMap.get("investId") + "", 1));
						String responsed = FddClient.invokeContractFilling(fadaMap.getContractId());

						JSONObject jbContract = JSONObject.fromObject(responsed);
						log.info("法大大合同归档 ====>" + net.sf.json.util.JSONUtils.valueToString(jbContract));
						if (jbContract.getInt("code") == 1000) {
							successNum = successNum + 1;
						}
					}

				} else {
					// 签署关键字
					String sign_key = "应收账款转让人";
					String borrowQians = FddClient.invokeExtSignAuto(sontract_send, jkuanMap.getCustomerId(), doc_url,
							rerMap.getTransactionId(), client_type, client_role, contrac_id, doc_title, sign_key, "",
							doc_typeD);
					JSONObject jobt = JSONObject.fromObject(borrowQians);
					log.info("法大大自动文档签署");
					log.info(net.sf.json.util.JSONUtils.valueToString(jobt) + "====>");

					if (jobt.getInt("code") == 1000) {

						// 签署关键字
						String midd_sign_key = "普金资本运营";

						String middSign = FddClient.invokeExtSignAutoTwo(middle_send, middleMap.getCustomerId(),
								doc_url, "2", "1", contrac_id, doc_title, midd_sign_key, "", doc_typeD);
						JSONObject jobmiddle = JSONObject.fromObject(middSign);

						log.info("居间方自动文档签署完成");
						log.info(net.sf.json.util.JSONUtils.valueToString(jobmiddle) + "====>");
						// 签署后文件下载地址
						String download_url = jobmiddle.getString("download_url");

						// 在线查看已签署地址
						String viewpdf_url = jobmiddle.getString("viewpdf_url");
						investDao.updateInvestFadadaInfo(contrac_id, download_url, viewpdf_url,
								investMap.get("trxId") + "", Convert.strToLong(investMap.get("investor") + "", 1));

						// 法大大合同归档
						Invest fadaMap = investDao
								.queryInvestById(Convert.strToLong(investMap.get("investId") + "", 1));
						String responsed = FddClient.invokeContractFilling(fadaMap.getContractId());

						JSONObject jbContract = JSONObject.fromObject(responsed);
						log.info("法大大合同归档 ====>" + net.sf.json.util.JSONUtils.valueToString(jbContract));
						if (jbContract.getInt("code") == 1000) {
							successNum = successNum + 1;
						}
					}

				}

			}

		}

		// 假如签署合同成功个数与投资人个数相同，表示签署合同成功。
		if (successNum == investList.size()) {
			borrowUserMap = borrowDao.queryBorrowerById(id);
			if (borrowUserMap != null) {
				long userId = Convert.strToLong(borrowUserMap.get("publisher") + "", -1);
				userService.updateSign(userId);// 更换校验码
			}
			investorList = investDao.queryInvestorByBorrowId(id);
			if (investorList != null) {
				for (Map<String, Object> investorMap : investorList) {
					long userId = Convert.strToLong(investorMap.get("investor") + "", -1);
					userService.updateSign(userId);// 更换校验码
				}
			}
			return ajaxDoneInfo("200", "补签合同成功", "", "");
		} else {
			return ajaxDoneInfo("300", "补签合同失败", "", "");
		}
	}

}
